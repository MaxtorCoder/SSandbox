// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bgs/low/pb/client/user_manager_service.proto

#include "bgs/low/pb/client/user_manager_service.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2fentity_5ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EntityId_bgs_2flow_2fpb_2fclient_2fentity_5ftypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2frole_5ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Role_bgs_2flow_2fpb_2fclient_2frole_5ftypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2fuser_5fmanager_5ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BlockedPlayer_bgs_2flow_2fpb_2fclient_2fuser_5fmanager_5ftypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2fuser_5fmanager_5ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RecentPlayer_bgs_2flow_2fpb_2fclient_2fuser_5fmanager_5ftypes_2eproto;
namespace bgs {
namespace protocol {
namespace user_manager {
namespace v1 {
class SubscribeRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubscribeRequest> _instance;
} _SubscribeRequest_default_instance_;
class SubscribeResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubscribeResponse> _instance;
} _SubscribeResponse_default_instance_;
class UnsubscribeRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UnsubscribeRequest> _instance;
} _UnsubscribeRequest_default_instance_;
class AddRecentPlayersRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AddRecentPlayersRequest> _instance;
} _AddRecentPlayersRequest_default_instance_;
class ClearRecentPlayersRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClearRecentPlayersRequest> _instance;
} _ClearRecentPlayersRequest_default_instance_;
class BlockPlayerRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BlockPlayerRequest> _instance;
} _BlockPlayerRequest_default_instance_;
class UnblockPlayerRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UnblockPlayerRequest> _instance;
} _UnblockPlayerRequest_default_instance_;
class BlockedPlayerAddedNotificationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BlockedPlayerAddedNotification> _instance;
} _BlockedPlayerAddedNotification_default_instance_;
class BlockedPlayerRemovedNotificationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BlockedPlayerRemovedNotification> _instance;
} _BlockedPlayerRemovedNotification_default_instance_;
class RecentPlayersAddedNotificationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RecentPlayersAddedNotification> _instance;
} _RecentPlayersAddedNotification_default_instance_;
class RecentPlayersRemovedNotificationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RecentPlayersRemovedNotification> _instance;
} _RecentPlayersRemovedNotification_default_instance_;
}  // namespace v1
}  // namespace user_manager
}  // namespace protocol
}  // namespace bgs
static void InitDefaultsscc_info_AddRecentPlayersRequest_bgs_2flow_2fpb_2fclient_2fuser_5fmanager_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::user_manager::v1::_AddRecentPlayersRequest_default_instance_;
    new (ptr) ::bgs::protocol::user_manager::v1::AddRecentPlayersRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::user_manager::v1::AddRecentPlayersRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AddRecentPlayersRequest_bgs_2flow_2fpb_2fclient_2fuser_5fmanager_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_AddRecentPlayersRequest_bgs_2flow_2fpb_2fclient_2fuser_5fmanager_5fservice_2eproto}, {
      &scc_info_RecentPlayer_bgs_2flow_2fpb_2fclient_2fuser_5fmanager_5ftypes_2eproto.base,
      &scc_info_EntityId_bgs_2flow_2fpb_2fclient_2fentity_5ftypes_2eproto.base,}};

static void InitDefaultsscc_info_BlockPlayerRequest_bgs_2flow_2fpb_2fclient_2fuser_5fmanager_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::user_manager::v1::_BlockPlayerRequest_default_instance_;
    new (ptr) ::bgs::protocol::user_manager::v1::BlockPlayerRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::user_manager::v1::BlockPlayerRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BlockPlayerRequest_bgs_2flow_2fpb_2fclient_2fuser_5fmanager_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_BlockPlayerRequest_bgs_2flow_2fpb_2fclient_2fuser_5fmanager_5fservice_2eproto}, {
      &scc_info_EntityId_bgs_2flow_2fpb_2fclient_2fentity_5ftypes_2eproto.base,}};

static void InitDefaultsscc_info_BlockedPlayerAddedNotification_bgs_2flow_2fpb_2fclient_2fuser_5fmanager_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::user_manager::v1::_BlockedPlayerAddedNotification_default_instance_;
    new (ptr) ::bgs::protocol::user_manager::v1::BlockedPlayerAddedNotification();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::user_manager::v1::BlockedPlayerAddedNotification::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BlockedPlayerAddedNotification_bgs_2flow_2fpb_2fclient_2fuser_5fmanager_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_BlockedPlayerAddedNotification_bgs_2flow_2fpb_2fclient_2fuser_5fmanager_5fservice_2eproto}, {
      &scc_info_BlockedPlayer_bgs_2flow_2fpb_2fclient_2fuser_5fmanager_5ftypes_2eproto.base,
      &scc_info_EntityId_bgs_2flow_2fpb_2fclient_2fentity_5ftypes_2eproto.base,}};

static void InitDefaultsscc_info_BlockedPlayerRemovedNotification_bgs_2flow_2fpb_2fclient_2fuser_5fmanager_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::user_manager::v1::_BlockedPlayerRemovedNotification_default_instance_;
    new (ptr) ::bgs::protocol::user_manager::v1::BlockedPlayerRemovedNotification();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::user_manager::v1::BlockedPlayerRemovedNotification::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BlockedPlayerRemovedNotification_bgs_2flow_2fpb_2fclient_2fuser_5fmanager_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_BlockedPlayerRemovedNotification_bgs_2flow_2fpb_2fclient_2fuser_5fmanager_5fservice_2eproto}, {
      &scc_info_BlockedPlayer_bgs_2flow_2fpb_2fclient_2fuser_5fmanager_5ftypes_2eproto.base,
      &scc_info_EntityId_bgs_2flow_2fpb_2fclient_2fentity_5ftypes_2eproto.base,}};

static void InitDefaultsscc_info_ClearRecentPlayersRequest_bgs_2flow_2fpb_2fclient_2fuser_5fmanager_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::user_manager::v1::_ClearRecentPlayersRequest_default_instance_;
    new (ptr) ::bgs::protocol::user_manager::v1::ClearRecentPlayersRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::user_manager::v1::ClearRecentPlayersRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ClearRecentPlayersRequest_bgs_2flow_2fpb_2fclient_2fuser_5fmanager_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ClearRecentPlayersRequest_bgs_2flow_2fpb_2fclient_2fuser_5fmanager_5fservice_2eproto}, {
      &scc_info_EntityId_bgs_2flow_2fpb_2fclient_2fentity_5ftypes_2eproto.base,}};

static void InitDefaultsscc_info_RecentPlayersAddedNotification_bgs_2flow_2fpb_2fclient_2fuser_5fmanager_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::user_manager::v1::_RecentPlayersAddedNotification_default_instance_;
    new (ptr) ::bgs::protocol::user_manager::v1::RecentPlayersAddedNotification();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::user_manager::v1::RecentPlayersAddedNotification::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RecentPlayersAddedNotification_bgs_2flow_2fpb_2fclient_2fuser_5fmanager_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RecentPlayersAddedNotification_bgs_2flow_2fpb_2fclient_2fuser_5fmanager_5fservice_2eproto}, {
      &scc_info_RecentPlayer_bgs_2flow_2fpb_2fclient_2fuser_5fmanager_5ftypes_2eproto.base,}};

static void InitDefaultsscc_info_RecentPlayersRemovedNotification_bgs_2flow_2fpb_2fclient_2fuser_5fmanager_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::user_manager::v1::_RecentPlayersRemovedNotification_default_instance_;
    new (ptr) ::bgs::protocol::user_manager::v1::RecentPlayersRemovedNotification();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::user_manager::v1::RecentPlayersRemovedNotification::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RecentPlayersRemovedNotification_bgs_2flow_2fpb_2fclient_2fuser_5fmanager_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RecentPlayersRemovedNotification_bgs_2flow_2fpb_2fclient_2fuser_5fmanager_5fservice_2eproto}, {
      &scc_info_RecentPlayer_bgs_2flow_2fpb_2fclient_2fuser_5fmanager_5ftypes_2eproto.base,}};

static void InitDefaultsscc_info_SubscribeRequest_bgs_2flow_2fpb_2fclient_2fuser_5fmanager_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::user_manager::v1::_SubscribeRequest_default_instance_;
    new (ptr) ::bgs::protocol::user_manager::v1::SubscribeRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::user_manager::v1::SubscribeRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SubscribeRequest_bgs_2flow_2fpb_2fclient_2fuser_5fmanager_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SubscribeRequest_bgs_2flow_2fpb_2fclient_2fuser_5fmanager_5fservice_2eproto}, {
      &scc_info_EntityId_bgs_2flow_2fpb_2fclient_2fentity_5ftypes_2eproto.base,}};

static void InitDefaultsscc_info_SubscribeResponse_bgs_2flow_2fpb_2fclient_2fuser_5fmanager_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::user_manager::v1::_SubscribeResponse_default_instance_;
    new (ptr) ::bgs::protocol::user_manager::v1::SubscribeResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::user_manager::v1::SubscribeResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_SubscribeResponse_bgs_2flow_2fpb_2fclient_2fuser_5fmanager_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_SubscribeResponse_bgs_2flow_2fpb_2fclient_2fuser_5fmanager_5fservice_2eproto}, {
      &scc_info_BlockedPlayer_bgs_2flow_2fpb_2fclient_2fuser_5fmanager_5ftypes_2eproto.base,
      &scc_info_RecentPlayer_bgs_2flow_2fpb_2fclient_2fuser_5fmanager_5ftypes_2eproto.base,
      &scc_info_Role_bgs_2flow_2fpb_2fclient_2frole_5ftypes_2eproto.base,}};

static void InitDefaultsscc_info_UnblockPlayerRequest_bgs_2flow_2fpb_2fclient_2fuser_5fmanager_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::user_manager::v1::_UnblockPlayerRequest_default_instance_;
    new (ptr) ::bgs::protocol::user_manager::v1::UnblockPlayerRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::user_manager::v1::UnblockPlayerRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UnblockPlayerRequest_bgs_2flow_2fpb_2fclient_2fuser_5fmanager_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UnblockPlayerRequest_bgs_2flow_2fpb_2fclient_2fuser_5fmanager_5fservice_2eproto}, {
      &scc_info_EntityId_bgs_2flow_2fpb_2fclient_2fentity_5ftypes_2eproto.base,}};

static void InitDefaultsscc_info_UnsubscribeRequest_bgs_2flow_2fpb_2fclient_2fuser_5fmanager_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::user_manager::v1::_UnsubscribeRequest_default_instance_;
    new (ptr) ::bgs::protocol::user_manager::v1::UnsubscribeRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::user_manager::v1::UnsubscribeRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UnsubscribeRequest_bgs_2flow_2fpb_2fclient_2fuser_5fmanager_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UnsubscribeRequest_bgs_2flow_2fpb_2fclient_2fuser_5fmanager_5fservice_2eproto}, {
      &scc_info_EntityId_bgs_2flow_2fpb_2fclient_2fentity_5ftypes_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_bgs_2flow_2fpb_2fclient_2fuser_5fmanager_5fservice_2eproto[11];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_bgs_2flow_2fpb_2fclient_2fuser_5fmanager_5fservice_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_bgs_2flow_2fpb_2fclient_2fuser_5fmanager_5fservice_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_bgs_2flow_2fpb_2fclient_2fuser_5fmanager_5fservice_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::user_manager::v1::SubscribeRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::user_manager::v1::SubscribeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::user_manager::v1::SubscribeRequest, agent_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::user_manager::v1::SubscribeRequest, object_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::user_manager::v1::SubscribeResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::user_manager::v1::SubscribeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::user_manager::v1::SubscribeResponse, blocked_players_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::user_manager::v1::SubscribeResponse, recent_players_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::user_manager::v1::SubscribeResponse, role_),
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::user_manager::v1::UnsubscribeRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::user_manager::v1::UnsubscribeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::user_manager::v1::UnsubscribeRequest, agent_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::user_manager::v1::UnsubscribeRequest, object_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::user_manager::v1::AddRecentPlayersRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::user_manager::v1::AddRecentPlayersRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::user_manager::v1::AddRecentPlayersRequest, players_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::user_manager::v1::AddRecentPlayersRequest, agent_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::user_manager::v1::AddRecentPlayersRequest, program_),
  ~0u,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::user_manager::v1::ClearRecentPlayersRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::user_manager::v1::ClearRecentPlayersRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::user_manager::v1::ClearRecentPlayersRequest, agent_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::user_manager::v1::ClearRecentPlayersRequest, program_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::user_manager::v1::BlockPlayerRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::user_manager::v1::BlockPlayerRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::user_manager::v1::BlockPlayerRequest, agent_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::user_manager::v1::BlockPlayerRequest, target_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::user_manager::v1::BlockPlayerRequest, role_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::user_manager::v1::UnblockPlayerRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::user_manager::v1::UnblockPlayerRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::user_manager::v1::UnblockPlayerRequest, agent_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::user_manager::v1::UnblockPlayerRequest, target_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::user_manager::v1::BlockedPlayerAddedNotification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::user_manager::v1::BlockedPlayerAddedNotification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::user_manager::v1::BlockedPlayerAddedNotification, player_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::user_manager::v1::BlockedPlayerAddedNotification, game_account_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::user_manager::v1::BlockedPlayerAddedNotification, account_id_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::user_manager::v1::BlockedPlayerRemovedNotification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::user_manager::v1::BlockedPlayerRemovedNotification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::user_manager::v1::BlockedPlayerRemovedNotification, player_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::user_manager::v1::BlockedPlayerRemovedNotification, game_account_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::user_manager::v1::BlockedPlayerRemovedNotification, account_id_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::user_manager::v1::RecentPlayersAddedNotification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::user_manager::v1::RecentPlayersAddedNotification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::user_manager::v1::RecentPlayersAddedNotification, player_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::user_manager::v1::RecentPlayersRemovedNotification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::user_manager::v1::RecentPlayersRemovedNotification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::user_manager::v1::RecentPlayersRemovedNotification, player_),
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::bgs::protocol::user_manager::v1::SubscribeRequest)},
  { 9, 17, sizeof(::bgs::protocol::user_manager::v1::SubscribeResponse)},
  { 20, 27, sizeof(::bgs::protocol::user_manager::v1::UnsubscribeRequest)},
  { 29, 37, sizeof(::bgs::protocol::user_manager::v1::AddRecentPlayersRequest)},
  { 40, 47, sizeof(::bgs::protocol::user_manager::v1::ClearRecentPlayersRequest)},
  { 49, 57, sizeof(::bgs::protocol::user_manager::v1::BlockPlayerRequest)},
  { 60, 67, sizeof(::bgs::protocol::user_manager::v1::UnblockPlayerRequest)},
  { 69, 77, sizeof(::bgs::protocol::user_manager::v1::BlockedPlayerAddedNotification)},
  { 80, 88, sizeof(::bgs::protocol::user_manager::v1::BlockedPlayerRemovedNotification)},
  { 91, 97, sizeof(::bgs::protocol::user_manager::v1::RecentPlayersAddedNotification)},
  { 98, 104, sizeof(::bgs::protocol::user_manager::v1::RecentPlayersRemovedNotification)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::user_manager::v1::_SubscribeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::user_manager::v1::_SubscribeResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::user_manager::v1::_UnsubscribeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::user_manager::v1::_AddRecentPlayersRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::user_manager::v1::_ClearRecentPlayersRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::user_manager::v1::_BlockPlayerRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::user_manager::v1::_UnblockPlayerRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::user_manager::v1::_BlockedPlayerAddedNotification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::user_manager::v1::_BlockedPlayerRemovedNotification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::user_manager::v1::_RecentPlayersAddedNotification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::user_manager::v1::_RecentPlayersRemovedNotification_default_instance_),
};

const char descriptor_table_protodef_bgs_2flow_2fpb_2fclient_2fuser_5fmanager_5fservice_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n,bgs/low/pb/client/user_manager_service"
  ".proto\022\034bgs.protocol.user_manager.v1\032*bg"
  "s/low/pb/client/user_manager_types.proto"
  "\032$bgs/low/pb/client/entity_types.proto\032\""
  "bgs/low/pb/client/role_types.proto\032!bgs/"
  "low/pb/client/rpc_types.proto\"O\n\020Subscri"
  "beRequest\022(\n\010agent_id\030\001 \001(\0132\026.bgs.protoc"
  "ol.EntityId\022\021\n\tobject_id\030\002 \002(\004\"\277\001\n\021Subsc"
  "ribeResponse\022D\n\017blocked_players\030\001 \003(\0132+."
  "bgs.protocol.user_manager.v1.BlockedPlay"
  "er\022B\n\016recent_players\030\002 \003(\0132*.bgs.protoco"
  "l.user_manager.v1.RecentPlayer\022 \n\004role\030\003"
  " \003(\0132\022.bgs.protocol.Role\"Q\n\022UnsubscribeR"
  "equest\022(\n\010agent_id\030\001 \001(\0132\026.bgs.protocol."
  "EntityId\022\021\n\tobject_id\030\002 \001(\004\"\221\001\n\027AddRecen"
  "tPlayersRequest\022;\n\007players\030\001 \003(\0132*.bgs.p"
  "rotocol.user_manager.v1.RecentPlayer\022(\n\010"
  "agent_id\030\002 \001(\0132\026.bgs.protocol.EntityId\022\017"
  "\n\007program\030\003 \001(\r\"V\n\031ClearRecentPlayersReq"
  "uest\022(\n\010agent_id\030\001 \001(\0132\026.bgs.protocol.En"
  "tityId\022\017\n\007program\030\002 \001(\r\"w\n\022BlockPlayerRe"
  "quest\022(\n\010agent_id\030\001 \001(\0132\026.bgs.protocol.E"
  "ntityId\022)\n\ttarget_id\030\002 \002(\0132\026.bgs.protoco"
  "l.EntityId\022\014\n\004role\030\003 \001(\r\"k\n\024UnblockPlaye"
  "rRequest\022(\n\010agent_id\030\001 \001(\0132\026.bgs.protoco"
  "l.EntityId\022)\n\ttarget_id\030\002 \002(\0132\026.bgs.prot"
  "ocol.EntityId\"\272\001\n\036BlockedPlayerAddedNoti"
  "fication\022;\n\006player\030\001 \002(\0132+.bgs.protocol."
  "user_manager.v1.BlockedPlayer\022/\n\017game_ac"
  "count_id\030\002 \001(\0132\026.bgs.protocol.EntityId\022*"
  "\n\naccount_id\030\003 \001(\0132\026.bgs.protocol.Entity"
  "Id\"\274\001\n BlockedPlayerRemovedNotification\022"
  ";\n\006player\030\001 \002(\0132+.bgs.protocol.user_mana"
  "ger.v1.BlockedPlayer\022/\n\017game_account_id\030"
  "\002 \001(\0132\026.bgs.protocol.EntityId\022*\n\naccount"
  "_id\030\003 \001(\0132\026.bgs.protocol.EntityId\"\\\n\036Rec"
  "entPlayersAddedNotification\022:\n\006player\030\001 "
  "\003(\0132*.bgs.protocol.user_manager.v1.Recen"
  "tPlayer\"^\n RecentPlayersRemovedNotificat"
  "ion\022:\n\006player\030\001 \003(\0132*.bgs.protocol.user_"
  "manager.v1.RecentPlayer2\267\006\n\022UserManagerS"
  "ervice\022t\n\tSubscribe\022..bgs.protocol.user_"
  "manager.v1.SubscribeRequest\032/.bgs.protoc"
  "ol.user_manager.v1.SubscribeResponse\"\006\202\371"
  "+\002\010\001\022g\n\020AddRecentPlayers\0225.bgs.protocol."
  "user_manager.v1.AddRecentPlayersRequest\032"
  "\024.bgs.protocol.NoData\"\006\202\371+\002\010\n\022k\n\022ClearRe"
  "centPlayers\0227.bgs.protocol.user_manager."
  "v1.ClearRecentPlayersRequest\032\024.bgs.proto"
  "col.NoData\"\006\202\371+\002\010\013\022]\n\013BlockPlayer\0220.bgs."
  "protocol.user_manager.v1.BlockPlayerRequ"
  "est\032\024.bgs.protocol.NoData\"\006\202\371+\002\010\024\022a\n\rUnb"
  "lockPlayer\0222.bgs.protocol.user_manager.v"
  "1.UnblockPlayerRequest\032\024.bgs.protocol.No"
  "Data\"\006\202\371+\002\010\025\022g\n\025BlockPlayerForSession\0220."
  "bgs.protocol.user_manager.v1.BlockPlayer"
  "Request\032\024.bgs.protocol.NoData\"\006\202\371+\002\010(\022]\n"
  "\013Unsubscribe\0220.bgs.protocol.user_manager"
  ".v1.UnsubscribeRequest\032\024.bgs.protocol.No"
  "Data\"\006\202\371+\002\0103\032K\202\371+/\n-bnet.protocol.user_m"
  "anager.UserManagerService\202\371+\016*\014user_mana"
  "ger\212\371+\002\020\0012\273\004\n\023UserManagerListener\022w\n\024OnB"
  "lockedPlayerAdded\022<.bgs.protocol.user_ma"
  "nager.v1.BlockedPlayerAddedNotification\032"
  "\031.bgs.protocol.NO_RESPONSE\"\006\202\371+\002\010\001\022{\n\026On"
  "BlockedPlayerRemoved\022>.bgs.protocol.user"
  "_manager.v1.BlockedPlayerRemovedNotifica"
  "tion\032\031.bgs.protocol.NO_RESPONSE\"\006\202\371+\002\010\002\022"
  "w\n\024OnRecentPlayersAdded\022<.bgs.protocol.u"
  "ser_manager.v1.RecentPlayersAddedNotific"
  "ation\032\031.bgs.protocol.NO_RESPONSE\"\006\202\371+\002\010\013"
  "\022{\n\026OnRecentPlayersRemoved\022>.bgs.protoco"
  "l.user_manager.v1.RecentPlayersRemovedNo"
  "tification\032\031.bgs.protocol.NO_RESPONSE\"\006\202"
  "\371+\002\010\014\0328\202\371+.\n,bnet.protocol.user_manager."
  "UserManagerNotify\212\371+\002\010\001B\003\200\001\000"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_bgs_2flow_2fpb_2fclient_2fuser_5fmanager_5fservice_2eproto_deps[4] = {
  &::descriptor_table_bgs_2flow_2fpb_2fclient_2fentity_5ftypes_2eproto,
  &::descriptor_table_bgs_2flow_2fpb_2fclient_2frole_5ftypes_2eproto,
  &::descriptor_table_bgs_2flow_2fpb_2fclient_2frpc_5ftypes_2eproto,
  &::descriptor_table_bgs_2flow_2fpb_2fclient_2fuser_5fmanager_5ftypes_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_bgs_2flow_2fpb_2fclient_2fuser_5fmanager_5fservice_2eproto_sccs[11] = {
  &scc_info_AddRecentPlayersRequest_bgs_2flow_2fpb_2fclient_2fuser_5fmanager_5fservice_2eproto.base,
  &scc_info_BlockPlayerRequest_bgs_2flow_2fpb_2fclient_2fuser_5fmanager_5fservice_2eproto.base,
  &scc_info_BlockedPlayerAddedNotification_bgs_2flow_2fpb_2fclient_2fuser_5fmanager_5fservice_2eproto.base,
  &scc_info_BlockedPlayerRemovedNotification_bgs_2flow_2fpb_2fclient_2fuser_5fmanager_5fservice_2eproto.base,
  &scc_info_ClearRecentPlayersRequest_bgs_2flow_2fpb_2fclient_2fuser_5fmanager_5fservice_2eproto.base,
  &scc_info_RecentPlayersAddedNotification_bgs_2flow_2fpb_2fclient_2fuser_5fmanager_5fservice_2eproto.base,
  &scc_info_RecentPlayersRemovedNotification_bgs_2flow_2fpb_2fclient_2fuser_5fmanager_5fservice_2eproto.base,
  &scc_info_SubscribeRequest_bgs_2flow_2fpb_2fclient_2fuser_5fmanager_5fservice_2eproto.base,
  &scc_info_SubscribeResponse_bgs_2flow_2fpb_2fclient_2fuser_5fmanager_5fservice_2eproto.base,
  &scc_info_UnblockPlayerRequest_bgs_2flow_2fpb_2fclient_2fuser_5fmanager_5fservice_2eproto.base,
  &scc_info_UnsubscribeRequest_bgs_2flow_2fpb_2fclient_2fuser_5fmanager_5fservice_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_bgs_2flow_2fpb_2fclient_2fuser_5fmanager_5fservice_2eproto_once;
static bool descriptor_table_bgs_2flow_2fpb_2fclient_2fuser_5fmanager_5fservice_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bgs_2flow_2fpb_2fclient_2fuser_5fmanager_5fservice_2eproto = {
  &descriptor_table_bgs_2flow_2fpb_2fclient_2fuser_5fmanager_5fservice_2eproto_initialized, descriptor_table_protodef_bgs_2flow_2fpb_2fclient_2fuser_5fmanager_5fservice_2eproto, "bgs/low/pb/client/user_manager_service.proto", 3028,
  &descriptor_table_bgs_2flow_2fpb_2fclient_2fuser_5fmanager_5fservice_2eproto_once, descriptor_table_bgs_2flow_2fpb_2fclient_2fuser_5fmanager_5fservice_2eproto_sccs, descriptor_table_bgs_2flow_2fpb_2fclient_2fuser_5fmanager_5fservice_2eproto_deps, 11, 4,
  schemas, file_default_instances, TableStruct_bgs_2flow_2fpb_2fclient_2fuser_5fmanager_5fservice_2eproto::offsets,
  file_level_metadata_bgs_2flow_2fpb_2fclient_2fuser_5fmanager_5fservice_2eproto, 11, file_level_enum_descriptors_bgs_2flow_2fpb_2fclient_2fuser_5fmanager_5fservice_2eproto, file_level_service_descriptors_bgs_2flow_2fpb_2fclient_2fuser_5fmanager_5fservice_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_bgs_2flow_2fpb_2fclient_2fuser_5fmanager_5fservice_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_bgs_2flow_2fpb_2fclient_2fuser_5fmanager_5fservice_2eproto)), true);
namespace bgs {
namespace protocol {
namespace user_manager {
namespace v1 {

// ===================================================================

void SubscribeRequest::InitAsDefaultInstance() {
  ::bgs::protocol::user_manager::v1::_SubscribeRequest_default_instance_._instance.get_mutable()->agent_id_ = const_cast< ::bgs::protocol::EntityId*>(
      ::bgs::protocol::EntityId::internal_default_instance());
}
class SubscribeRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<SubscribeRequest>()._has_bits_);
  static const ::bgs::protocol::EntityId& agent_id(const SubscribeRequest* msg);
  static void set_has_agent_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_object_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::bgs::protocol::EntityId&
SubscribeRequest::_Internal::agent_id(const SubscribeRequest* msg) {
  return *msg->agent_id_;
}
void SubscribeRequest::clear_agent_id() {
  if (agent_id_ != nullptr) agent_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
SubscribeRequest::SubscribeRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.user_manager.v1.SubscribeRequest)
}
SubscribeRequest::SubscribeRequest(const SubscribeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_agent_id()) {
    agent_id_ = new ::bgs::protocol::EntityId(*from.agent_id_);
  } else {
    agent_id_ = nullptr;
  }
  object_id_ = from.object_id_;
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.user_manager.v1.SubscribeRequest)
}

void SubscribeRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SubscribeRequest_bgs_2flow_2fpb_2fclient_2fuser_5fmanager_5fservice_2eproto.base);
  ::memset(&agent_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&object_id_) -
      reinterpret_cast<char*>(&agent_id_)) + sizeof(object_id_));
}

SubscribeRequest::~SubscribeRequest() {
  // @@protoc_insertion_point(destructor:bgs.protocol.user_manager.v1.SubscribeRequest)
  SharedDtor();
}

void SubscribeRequest::SharedDtor() {
  if (this != internal_default_instance()) delete agent_id_;
}

void SubscribeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubscribeRequest& SubscribeRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SubscribeRequest_bgs_2flow_2fpb_2fclient_2fuser_5fmanager_5fservice_2eproto.base);
  return *internal_default_instance();
}


void SubscribeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.user_manager.v1.SubscribeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(agent_id_ != nullptr);
    agent_id_->Clear();
  }
  object_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* SubscribeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.EntityId agent_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_agent_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 object_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_object_id(&has_bits);
          object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubscribeRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.user_manager.v1.SubscribeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.EntityId agent_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::agent_id(this), target, stream);
  }

  // required uint64 object_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_object_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.user_manager.v1.SubscribeRequest)
  return target;
}

size_t SubscribeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.user_manager.v1.SubscribeRequest)
  size_t total_size = 0;

  // required uint64 object_id = 2;
  if (_internal_has_object_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_object_id());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .bgs.protocol.EntityId agent_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *agent_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubscribeRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.user_manager.v1.SubscribeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SubscribeRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubscribeRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.user_manager.v1.SubscribeRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.user_manager.v1.SubscribeRequest)
    MergeFrom(*source);
  }
}

void SubscribeRequest::MergeFrom(const SubscribeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.user_manager.v1.SubscribeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_agent_id()->::bgs::protocol::EntityId::MergeFrom(from._internal_agent_id());
    }
    if (cached_has_bits & 0x00000002u) {
      object_id_ = from.object_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SubscribeRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.user_manager.v1.SubscribeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscribeRequest::CopyFrom(const SubscribeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.user_manager.v1.SubscribeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  if (_internal_has_agent_id()) {
    if (!agent_id_->IsInitialized()) return false;
  }
  return true;
}

void SubscribeRequest::InternalSwap(SubscribeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(agent_id_, other->agent_id_);
  swap(object_id_, other->object_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscribeRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SubscribeResponse::InitAsDefaultInstance() {
}
class SubscribeResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<SubscribeResponse>()._has_bits_);
};

void SubscribeResponse::clear_blocked_players() {
  blocked_players_.Clear();
}
void SubscribeResponse::clear_recent_players() {
  recent_players_.Clear();
}
void SubscribeResponse::clear_role() {
  role_.Clear();
}
SubscribeResponse::SubscribeResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.user_manager.v1.SubscribeResponse)
}
SubscribeResponse::SubscribeResponse(const SubscribeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      blocked_players_(from.blocked_players_),
      recent_players_(from.recent_players_),
      role_(from.role_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.user_manager.v1.SubscribeResponse)
}

void SubscribeResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SubscribeResponse_bgs_2flow_2fpb_2fclient_2fuser_5fmanager_5fservice_2eproto.base);
}

SubscribeResponse::~SubscribeResponse() {
  // @@protoc_insertion_point(destructor:bgs.protocol.user_manager.v1.SubscribeResponse)
  SharedDtor();
}

void SubscribeResponse::SharedDtor() {
}

void SubscribeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubscribeResponse& SubscribeResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SubscribeResponse_bgs_2flow_2fpb_2fclient_2fuser_5fmanager_5fservice_2eproto.base);
  return *internal_default_instance();
}


void SubscribeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.user_manager.v1.SubscribeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  blocked_players_.Clear();
  recent_players_.Clear();
  role_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* SubscribeResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .bgs.protocol.user_manager.v1.BlockedPlayer blocked_players = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_blocked_players(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .bgs.protocol.user_manager.v1.RecentPlayer recent_players = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_recent_players(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .bgs.protocol.Role role = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_role(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubscribeResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.user_manager.v1.SubscribeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .bgs.protocol.user_manager.v1.BlockedPlayer blocked_players = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_blocked_players_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_blocked_players(i), target, stream);
  }

  // repeated .bgs.protocol.user_manager.v1.RecentPlayer recent_players = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_recent_players_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_recent_players(i), target, stream);
  }

  // repeated .bgs.protocol.Role role = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_role_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_role(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.user_manager.v1.SubscribeResponse)
  return target;
}

size_t SubscribeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.user_manager.v1.SubscribeResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .bgs.protocol.user_manager.v1.BlockedPlayer blocked_players = 1;
  total_size += 1UL * this->_internal_blocked_players_size();
  for (const auto& msg : this->blocked_players_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .bgs.protocol.user_manager.v1.RecentPlayer recent_players = 2;
  total_size += 1UL * this->_internal_recent_players_size();
  for (const auto& msg : this->recent_players_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .bgs.protocol.Role role = 3;
  total_size += 1UL * this->_internal_role_size();
  for (const auto& msg : this->role_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubscribeResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.user_manager.v1.SubscribeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SubscribeResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubscribeResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.user_manager.v1.SubscribeResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.user_manager.v1.SubscribeResponse)
    MergeFrom(*source);
  }
}

void SubscribeResponse::MergeFrom(const SubscribeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.user_manager.v1.SubscribeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  blocked_players_.MergeFrom(from.blocked_players_);
  recent_players_.MergeFrom(from.recent_players_);
  role_.MergeFrom(from.role_);
}

void SubscribeResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.user_manager.v1.SubscribeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscribeResponse::CopyFrom(const SubscribeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.user_manager.v1.SubscribeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeResponse::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(blocked_players_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(recent_players_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(role_)) return false;
  return true;
}

void SubscribeResponse::InternalSwap(SubscribeResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  blocked_players_.InternalSwap(&other->blocked_players_);
  recent_players_.InternalSwap(&other->recent_players_);
  role_.InternalSwap(&other->role_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscribeResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UnsubscribeRequest::InitAsDefaultInstance() {
  ::bgs::protocol::user_manager::v1::_UnsubscribeRequest_default_instance_._instance.get_mutable()->agent_id_ = const_cast< ::bgs::protocol::EntityId*>(
      ::bgs::protocol::EntityId::internal_default_instance());
}
class UnsubscribeRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<UnsubscribeRequest>()._has_bits_);
  static const ::bgs::protocol::EntityId& agent_id(const UnsubscribeRequest* msg);
  static void set_has_agent_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_object_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::bgs::protocol::EntityId&
UnsubscribeRequest::_Internal::agent_id(const UnsubscribeRequest* msg) {
  return *msg->agent_id_;
}
void UnsubscribeRequest::clear_agent_id() {
  if (agent_id_ != nullptr) agent_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
UnsubscribeRequest::UnsubscribeRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.user_manager.v1.UnsubscribeRequest)
}
UnsubscribeRequest::UnsubscribeRequest(const UnsubscribeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_agent_id()) {
    agent_id_ = new ::bgs::protocol::EntityId(*from.agent_id_);
  } else {
    agent_id_ = nullptr;
  }
  object_id_ = from.object_id_;
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.user_manager.v1.UnsubscribeRequest)
}

void UnsubscribeRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UnsubscribeRequest_bgs_2flow_2fpb_2fclient_2fuser_5fmanager_5fservice_2eproto.base);
  ::memset(&agent_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&object_id_) -
      reinterpret_cast<char*>(&agent_id_)) + sizeof(object_id_));
}

UnsubscribeRequest::~UnsubscribeRequest() {
  // @@protoc_insertion_point(destructor:bgs.protocol.user_manager.v1.UnsubscribeRequest)
  SharedDtor();
}

void UnsubscribeRequest::SharedDtor() {
  if (this != internal_default_instance()) delete agent_id_;
}

void UnsubscribeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UnsubscribeRequest& UnsubscribeRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UnsubscribeRequest_bgs_2flow_2fpb_2fclient_2fuser_5fmanager_5fservice_2eproto.base);
  return *internal_default_instance();
}


void UnsubscribeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.user_manager.v1.UnsubscribeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(agent_id_ != nullptr);
    agent_id_->Clear();
  }
  object_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* UnsubscribeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.EntityId agent_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_agent_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 object_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_object_id(&has_bits);
          object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UnsubscribeRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.user_manager.v1.UnsubscribeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.EntityId agent_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::agent_id(this), target, stream);
  }

  // optional uint64 object_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_object_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.user_manager.v1.UnsubscribeRequest)
  return target;
}

size_t UnsubscribeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.user_manager.v1.UnsubscribeRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .bgs.protocol.EntityId agent_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *agent_id_);
    }

    // optional uint64 object_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_object_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UnsubscribeRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.user_manager.v1.UnsubscribeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UnsubscribeRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UnsubscribeRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.user_manager.v1.UnsubscribeRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.user_manager.v1.UnsubscribeRequest)
    MergeFrom(*source);
  }
}

void UnsubscribeRequest::MergeFrom(const UnsubscribeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.user_manager.v1.UnsubscribeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_agent_id()->::bgs::protocol::EntityId::MergeFrom(from._internal_agent_id());
    }
    if (cached_has_bits & 0x00000002u) {
      object_id_ = from.object_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UnsubscribeRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.user_manager.v1.UnsubscribeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnsubscribeRequest::CopyFrom(const UnsubscribeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.user_manager.v1.UnsubscribeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnsubscribeRequest::IsInitialized() const {
  if (_internal_has_agent_id()) {
    if (!agent_id_->IsInitialized()) return false;
  }
  return true;
}

void UnsubscribeRequest::InternalSwap(UnsubscribeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(agent_id_, other->agent_id_);
  swap(object_id_, other->object_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UnsubscribeRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AddRecentPlayersRequest::InitAsDefaultInstance() {
  ::bgs::protocol::user_manager::v1::_AddRecentPlayersRequest_default_instance_._instance.get_mutable()->agent_id_ = const_cast< ::bgs::protocol::EntityId*>(
      ::bgs::protocol::EntityId::internal_default_instance());
}
class AddRecentPlayersRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<AddRecentPlayersRequest>()._has_bits_);
  static const ::bgs::protocol::EntityId& agent_id(const AddRecentPlayersRequest* msg);
  static void set_has_agent_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_program(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::bgs::protocol::EntityId&
AddRecentPlayersRequest::_Internal::agent_id(const AddRecentPlayersRequest* msg) {
  return *msg->agent_id_;
}
void AddRecentPlayersRequest::clear_players() {
  players_.Clear();
}
void AddRecentPlayersRequest::clear_agent_id() {
  if (agent_id_ != nullptr) agent_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
AddRecentPlayersRequest::AddRecentPlayersRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.user_manager.v1.AddRecentPlayersRequest)
}
AddRecentPlayersRequest::AddRecentPlayersRequest(const AddRecentPlayersRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      players_(from.players_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_agent_id()) {
    agent_id_ = new ::bgs::protocol::EntityId(*from.agent_id_);
  } else {
    agent_id_ = nullptr;
  }
  program_ = from.program_;
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.user_manager.v1.AddRecentPlayersRequest)
}

void AddRecentPlayersRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AddRecentPlayersRequest_bgs_2flow_2fpb_2fclient_2fuser_5fmanager_5fservice_2eproto.base);
  ::memset(&agent_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&program_) -
      reinterpret_cast<char*>(&agent_id_)) + sizeof(program_));
}

AddRecentPlayersRequest::~AddRecentPlayersRequest() {
  // @@protoc_insertion_point(destructor:bgs.protocol.user_manager.v1.AddRecentPlayersRequest)
  SharedDtor();
}

void AddRecentPlayersRequest::SharedDtor() {
  if (this != internal_default_instance()) delete agent_id_;
}

void AddRecentPlayersRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddRecentPlayersRequest& AddRecentPlayersRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AddRecentPlayersRequest_bgs_2flow_2fpb_2fclient_2fuser_5fmanager_5fservice_2eproto.base);
  return *internal_default_instance();
}


void AddRecentPlayersRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.user_manager.v1.AddRecentPlayersRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  players_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(agent_id_ != nullptr);
    agent_id_->Clear();
  }
  program_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* AddRecentPlayersRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .bgs.protocol.user_manager.v1.RecentPlayer players = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_players(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.EntityId agent_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_agent_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 program = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_program(&has_bits);
          program_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddRecentPlayersRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.user_manager.v1.AddRecentPlayersRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .bgs.protocol.user_manager.v1.RecentPlayer players = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_players_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_players(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.EntityId agent_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::agent_id(this), target, stream);
  }

  // optional uint32 program = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_program(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.user_manager.v1.AddRecentPlayersRequest)
  return target;
}

size_t AddRecentPlayersRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.user_manager.v1.AddRecentPlayersRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .bgs.protocol.user_manager.v1.RecentPlayer players = 1;
  total_size += 1UL * this->_internal_players_size();
  for (const auto& msg : this->players_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .bgs.protocol.EntityId agent_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *agent_id_);
    }

    // optional uint32 program = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_program());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddRecentPlayersRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.user_manager.v1.AddRecentPlayersRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AddRecentPlayersRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AddRecentPlayersRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.user_manager.v1.AddRecentPlayersRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.user_manager.v1.AddRecentPlayersRequest)
    MergeFrom(*source);
  }
}

void AddRecentPlayersRequest::MergeFrom(const AddRecentPlayersRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.user_manager.v1.AddRecentPlayersRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  players_.MergeFrom(from.players_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_agent_id()->::bgs::protocol::EntityId::MergeFrom(from._internal_agent_id());
    }
    if (cached_has_bits & 0x00000002u) {
      program_ = from.program_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AddRecentPlayersRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.user_manager.v1.AddRecentPlayersRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddRecentPlayersRequest::CopyFrom(const AddRecentPlayersRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.user_manager.v1.AddRecentPlayersRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddRecentPlayersRequest::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(players_)) return false;
  if (_internal_has_agent_id()) {
    if (!agent_id_->IsInitialized()) return false;
  }
  return true;
}

void AddRecentPlayersRequest::InternalSwap(AddRecentPlayersRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  players_.InternalSwap(&other->players_);
  swap(agent_id_, other->agent_id_);
  swap(program_, other->program_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AddRecentPlayersRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ClearRecentPlayersRequest::InitAsDefaultInstance() {
  ::bgs::protocol::user_manager::v1::_ClearRecentPlayersRequest_default_instance_._instance.get_mutable()->agent_id_ = const_cast< ::bgs::protocol::EntityId*>(
      ::bgs::protocol::EntityId::internal_default_instance());
}
class ClearRecentPlayersRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<ClearRecentPlayersRequest>()._has_bits_);
  static const ::bgs::protocol::EntityId& agent_id(const ClearRecentPlayersRequest* msg);
  static void set_has_agent_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_program(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::bgs::protocol::EntityId&
ClearRecentPlayersRequest::_Internal::agent_id(const ClearRecentPlayersRequest* msg) {
  return *msg->agent_id_;
}
void ClearRecentPlayersRequest::clear_agent_id() {
  if (agent_id_ != nullptr) agent_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
ClearRecentPlayersRequest::ClearRecentPlayersRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.user_manager.v1.ClearRecentPlayersRequest)
}
ClearRecentPlayersRequest::ClearRecentPlayersRequest(const ClearRecentPlayersRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_agent_id()) {
    agent_id_ = new ::bgs::protocol::EntityId(*from.agent_id_);
  } else {
    agent_id_ = nullptr;
  }
  program_ = from.program_;
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.user_manager.v1.ClearRecentPlayersRequest)
}

void ClearRecentPlayersRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ClearRecentPlayersRequest_bgs_2flow_2fpb_2fclient_2fuser_5fmanager_5fservice_2eproto.base);
  ::memset(&agent_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&program_) -
      reinterpret_cast<char*>(&agent_id_)) + sizeof(program_));
}

ClearRecentPlayersRequest::~ClearRecentPlayersRequest() {
  // @@protoc_insertion_point(destructor:bgs.protocol.user_manager.v1.ClearRecentPlayersRequest)
  SharedDtor();
}

void ClearRecentPlayersRequest::SharedDtor() {
  if (this != internal_default_instance()) delete agent_id_;
}

void ClearRecentPlayersRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClearRecentPlayersRequest& ClearRecentPlayersRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClearRecentPlayersRequest_bgs_2flow_2fpb_2fclient_2fuser_5fmanager_5fservice_2eproto.base);
  return *internal_default_instance();
}


void ClearRecentPlayersRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.user_manager.v1.ClearRecentPlayersRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(agent_id_ != nullptr);
    agent_id_->Clear();
  }
  program_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ClearRecentPlayersRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.EntityId agent_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_agent_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 program = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_program(&has_bits);
          program_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ClearRecentPlayersRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.user_manager.v1.ClearRecentPlayersRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.EntityId agent_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::agent_id(this), target, stream);
  }

  // optional uint32 program = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_program(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.user_manager.v1.ClearRecentPlayersRequest)
  return target;
}

size_t ClearRecentPlayersRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.user_manager.v1.ClearRecentPlayersRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .bgs.protocol.EntityId agent_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *agent_id_);
    }

    // optional uint32 program = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_program());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClearRecentPlayersRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.user_manager.v1.ClearRecentPlayersRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ClearRecentPlayersRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClearRecentPlayersRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.user_manager.v1.ClearRecentPlayersRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.user_manager.v1.ClearRecentPlayersRequest)
    MergeFrom(*source);
  }
}

void ClearRecentPlayersRequest::MergeFrom(const ClearRecentPlayersRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.user_manager.v1.ClearRecentPlayersRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_agent_id()->::bgs::protocol::EntityId::MergeFrom(from._internal_agent_id());
    }
    if (cached_has_bits & 0x00000002u) {
      program_ = from.program_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ClearRecentPlayersRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.user_manager.v1.ClearRecentPlayersRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClearRecentPlayersRequest::CopyFrom(const ClearRecentPlayersRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.user_manager.v1.ClearRecentPlayersRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClearRecentPlayersRequest::IsInitialized() const {
  if (_internal_has_agent_id()) {
    if (!agent_id_->IsInitialized()) return false;
  }
  return true;
}

void ClearRecentPlayersRequest::InternalSwap(ClearRecentPlayersRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(agent_id_, other->agent_id_);
  swap(program_, other->program_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClearRecentPlayersRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BlockPlayerRequest::InitAsDefaultInstance() {
  ::bgs::protocol::user_manager::v1::_BlockPlayerRequest_default_instance_._instance.get_mutable()->agent_id_ = const_cast< ::bgs::protocol::EntityId*>(
      ::bgs::protocol::EntityId::internal_default_instance());
  ::bgs::protocol::user_manager::v1::_BlockPlayerRequest_default_instance_._instance.get_mutable()->target_id_ = const_cast< ::bgs::protocol::EntityId*>(
      ::bgs::protocol::EntityId::internal_default_instance());
}
class BlockPlayerRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<BlockPlayerRequest>()._has_bits_);
  static const ::bgs::protocol::EntityId& agent_id(const BlockPlayerRequest* msg);
  static void set_has_agent_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::bgs::protocol::EntityId& target_id(const BlockPlayerRequest* msg);
  static void set_has_target_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_role(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::bgs::protocol::EntityId&
BlockPlayerRequest::_Internal::agent_id(const BlockPlayerRequest* msg) {
  return *msg->agent_id_;
}
const ::bgs::protocol::EntityId&
BlockPlayerRequest::_Internal::target_id(const BlockPlayerRequest* msg) {
  return *msg->target_id_;
}
void BlockPlayerRequest::clear_agent_id() {
  if (agent_id_ != nullptr) agent_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void BlockPlayerRequest::clear_target_id() {
  if (target_id_ != nullptr) target_id_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
BlockPlayerRequest::BlockPlayerRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.user_manager.v1.BlockPlayerRequest)
}
BlockPlayerRequest::BlockPlayerRequest(const BlockPlayerRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_agent_id()) {
    agent_id_ = new ::bgs::protocol::EntityId(*from.agent_id_);
  } else {
    agent_id_ = nullptr;
  }
  if (from._internal_has_target_id()) {
    target_id_ = new ::bgs::protocol::EntityId(*from.target_id_);
  } else {
    target_id_ = nullptr;
  }
  role_ = from.role_;
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.user_manager.v1.BlockPlayerRequest)
}

void BlockPlayerRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BlockPlayerRequest_bgs_2flow_2fpb_2fclient_2fuser_5fmanager_5fservice_2eproto.base);
  ::memset(&agent_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&role_) -
      reinterpret_cast<char*>(&agent_id_)) + sizeof(role_));
}

BlockPlayerRequest::~BlockPlayerRequest() {
  // @@protoc_insertion_point(destructor:bgs.protocol.user_manager.v1.BlockPlayerRequest)
  SharedDtor();
}

void BlockPlayerRequest::SharedDtor() {
  if (this != internal_default_instance()) delete agent_id_;
  if (this != internal_default_instance()) delete target_id_;
}

void BlockPlayerRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BlockPlayerRequest& BlockPlayerRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BlockPlayerRequest_bgs_2flow_2fpb_2fclient_2fuser_5fmanager_5fservice_2eproto.base);
  return *internal_default_instance();
}


void BlockPlayerRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.user_manager.v1.BlockPlayerRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(agent_id_ != nullptr);
      agent_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(target_id_ != nullptr);
      target_id_->Clear();
    }
  }
  role_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* BlockPlayerRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.EntityId agent_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_agent_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .bgs.protocol.EntityId target_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_target_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 role = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_role(&has_bits);
          role_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BlockPlayerRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.user_manager.v1.BlockPlayerRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.EntityId agent_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::agent_id(this), target, stream);
  }

  // required .bgs.protocol.EntityId target_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::target_id(this), target, stream);
  }

  // optional uint32 role = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_role(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.user_manager.v1.BlockPlayerRequest)
  return target;
}

size_t BlockPlayerRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.user_manager.v1.BlockPlayerRequest)
  size_t total_size = 0;

  // required .bgs.protocol.EntityId target_id = 2;
  if (_internal_has_target_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *target_id_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .bgs.protocol.EntityId agent_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *agent_id_);
  }

  // optional uint32 role = 3;
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_role());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BlockPlayerRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.user_manager.v1.BlockPlayerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const BlockPlayerRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BlockPlayerRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.user_manager.v1.BlockPlayerRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.user_manager.v1.BlockPlayerRequest)
    MergeFrom(*source);
  }
}

void BlockPlayerRequest::MergeFrom(const BlockPlayerRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.user_manager.v1.BlockPlayerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_agent_id()->::bgs::protocol::EntityId::MergeFrom(from._internal_agent_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_target_id()->::bgs::protocol::EntityId::MergeFrom(from._internal_target_id());
    }
    if (cached_has_bits & 0x00000004u) {
      role_ = from.role_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BlockPlayerRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.user_manager.v1.BlockPlayerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlockPlayerRequest::CopyFrom(const BlockPlayerRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.user_manager.v1.BlockPlayerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockPlayerRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  if (_internal_has_agent_id()) {
    if (!agent_id_->IsInitialized()) return false;
  }
  if (_internal_has_target_id()) {
    if (!target_id_->IsInitialized()) return false;
  }
  return true;
}

void BlockPlayerRequest::InternalSwap(BlockPlayerRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(agent_id_, other->agent_id_);
  swap(target_id_, other->target_id_);
  swap(role_, other->role_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BlockPlayerRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UnblockPlayerRequest::InitAsDefaultInstance() {
  ::bgs::protocol::user_manager::v1::_UnblockPlayerRequest_default_instance_._instance.get_mutable()->agent_id_ = const_cast< ::bgs::protocol::EntityId*>(
      ::bgs::protocol::EntityId::internal_default_instance());
  ::bgs::protocol::user_manager::v1::_UnblockPlayerRequest_default_instance_._instance.get_mutable()->target_id_ = const_cast< ::bgs::protocol::EntityId*>(
      ::bgs::protocol::EntityId::internal_default_instance());
}
class UnblockPlayerRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<UnblockPlayerRequest>()._has_bits_);
  static const ::bgs::protocol::EntityId& agent_id(const UnblockPlayerRequest* msg);
  static void set_has_agent_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::bgs::protocol::EntityId& target_id(const UnblockPlayerRequest* msg);
  static void set_has_target_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::bgs::protocol::EntityId&
UnblockPlayerRequest::_Internal::agent_id(const UnblockPlayerRequest* msg) {
  return *msg->agent_id_;
}
const ::bgs::protocol::EntityId&
UnblockPlayerRequest::_Internal::target_id(const UnblockPlayerRequest* msg) {
  return *msg->target_id_;
}
void UnblockPlayerRequest::clear_agent_id() {
  if (agent_id_ != nullptr) agent_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void UnblockPlayerRequest::clear_target_id() {
  if (target_id_ != nullptr) target_id_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
UnblockPlayerRequest::UnblockPlayerRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.user_manager.v1.UnblockPlayerRequest)
}
UnblockPlayerRequest::UnblockPlayerRequest(const UnblockPlayerRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_agent_id()) {
    agent_id_ = new ::bgs::protocol::EntityId(*from.agent_id_);
  } else {
    agent_id_ = nullptr;
  }
  if (from._internal_has_target_id()) {
    target_id_ = new ::bgs::protocol::EntityId(*from.target_id_);
  } else {
    target_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.user_manager.v1.UnblockPlayerRequest)
}

void UnblockPlayerRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UnblockPlayerRequest_bgs_2flow_2fpb_2fclient_2fuser_5fmanager_5fservice_2eproto.base);
  ::memset(&agent_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&target_id_) -
      reinterpret_cast<char*>(&agent_id_)) + sizeof(target_id_));
}

UnblockPlayerRequest::~UnblockPlayerRequest() {
  // @@protoc_insertion_point(destructor:bgs.protocol.user_manager.v1.UnblockPlayerRequest)
  SharedDtor();
}

void UnblockPlayerRequest::SharedDtor() {
  if (this != internal_default_instance()) delete agent_id_;
  if (this != internal_default_instance()) delete target_id_;
}

void UnblockPlayerRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UnblockPlayerRequest& UnblockPlayerRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UnblockPlayerRequest_bgs_2flow_2fpb_2fclient_2fuser_5fmanager_5fservice_2eproto.base);
  return *internal_default_instance();
}


void UnblockPlayerRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.user_manager.v1.UnblockPlayerRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(agent_id_ != nullptr);
      agent_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(target_id_ != nullptr);
      target_id_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* UnblockPlayerRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.EntityId agent_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_agent_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .bgs.protocol.EntityId target_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_target_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UnblockPlayerRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.user_manager.v1.UnblockPlayerRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.EntityId agent_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::agent_id(this), target, stream);
  }

  // required .bgs.protocol.EntityId target_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::target_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.user_manager.v1.UnblockPlayerRequest)
  return target;
}

size_t UnblockPlayerRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.user_manager.v1.UnblockPlayerRequest)
  size_t total_size = 0;

  // required .bgs.protocol.EntityId target_id = 2;
  if (_internal_has_target_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *target_id_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .bgs.protocol.EntityId agent_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *agent_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UnblockPlayerRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.user_manager.v1.UnblockPlayerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UnblockPlayerRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UnblockPlayerRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.user_manager.v1.UnblockPlayerRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.user_manager.v1.UnblockPlayerRequest)
    MergeFrom(*source);
  }
}

void UnblockPlayerRequest::MergeFrom(const UnblockPlayerRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.user_manager.v1.UnblockPlayerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_agent_id()->::bgs::protocol::EntityId::MergeFrom(from._internal_agent_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_target_id()->::bgs::protocol::EntityId::MergeFrom(from._internal_target_id());
    }
  }
}

void UnblockPlayerRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.user_manager.v1.UnblockPlayerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnblockPlayerRequest::CopyFrom(const UnblockPlayerRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.user_manager.v1.UnblockPlayerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnblockPlayerRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  if (_internal_has_agent_id()) {
    if (!agent_id_->IsInitialized()) return false;
  }
  if (_internal_has_target_id()) {
    if (!target_id_->IsInitialized()) return false;
  }
  return true;
}

void UnblockPlayerRequest::InternalSwap(UnblockPlayerRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(agent_id_, other->agent_id_);
  swap(target_id_, other->target_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UnblockPlayerRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BlockedPlayerAddedNotification::InitAsDefaultInstance() {
  ::bgs::protocol::user_manager::v1::_BlockedPlayerAddedNotification_default_instance_._instance.get_mutable()->player_ = const_cast< ::bgs::protocol::user_manager::v1::BlockedPlayer*>(
      ::bgs::protocol::user_manager::v1::BlockedPlayer::internal_default_instance());
  ::bgs::protocol::user_manager::v1::_BlockedPlayerAddedNotification_default_instance_._instance.get_mutable()->game_account_id_ = const_cast< ::bgs::protocol::EntityId*>(
      ::bgs::protocol::EntityId::internal_default_instance());
  ::bgs::protocol::user_manager::v1::_BlockedPlayerAddedNotification_default_instance_._instance.get_mutable()->account_id_ = const_cast< ::bgs::protocol::EntityId*>(
      ::bgs::protocol::EntityId::internal_default_instance());
}
class BlockedPlayerAddedNotification::_Internal {
 public:
  using HasBits = decltype(std::declval<BlockedPlayerAddedNotification>()._has_bits_);
  static const ::bgs::protocol::user_manager::v1::BlockedPlayer& player(const BlockedPlayerAddedNotification* msg);
  static void set_has_player(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::bgs::protocol::EntityId& game_account_id(const BlockedPlayerAddedNotification* msg);
  static void set_has_game_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::bgs::protocol::EntityId& account_id(const BlockedPlayerAddedNotification* msg);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::bgs::protocol::user_manager::v1::BlockedPlayer&
BlockedPlayerAddedNotification::_Internal::player(const BlockedPlayerAddedNotification* msg) {
  return *msg->player_;
}
const ::bgs::protocol::EntityId&
BlockedPlayerAddedNotification::_Internal::game_account_id(const BlockedPlayerAddedNotification* msg) {
  return *msg->game_account_id_;
}
const ::bgs::protocol::EntityId&
BlockedPlayerAddedNotification::_Internal::account_id(const BlockedPlayerAddedNotification* msg) {
  return *msg->account_id_;
}
void BlockedPlayerAddedNotification::clear_player() {
  if (player_ != nullptr) player_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void BlockedPlayerAddedNotification::clear_game_account_id() {
  if (game_account_id_ != nullptr) game_account_id_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void BlockedPlayerAddedNotification::clear_account_id() {
  if (account_id_ != nullptr) account_id_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
BlockedPlayerAddedNotification::BlockedPlayerAddedNotification()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.user_manager.v1.BlockedPlayerAddedNotification)
}
BlockedPlayerAddedNotification::BlockedPlayerAddedNotification(const BlockedPlayerAddedNotification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_player()) {
    player_ = new ::bgs::protocol::user_manager::v1::BlockedPlayer(*from.player_);
  } else {
    player_ = nullptr;
  }
  if (from._internal_has_game_account_id()) {
    game_account_id_ = new ::bgs::protocol::EntityId(*from.game_account_id_);
  } else {
    game_account_id_ = nullptr;
  }
  if (from._internal_has_account_id()) {
    account_id_ = new ::bgs::protocol::EntityId(*from.account_id_);
  } else {
    account_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.user_manager.v1.BlockedPlayerAddedNotification)
}

void BlockedPlayerAddedNotification::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BlockedPlayerAddedNotification_bgs_2flow_2fpb_2fclient_2fuser_5fmanager_5fservice_2eproto.base);
  ::memset(&player_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&account_id_) -
      reinterpret_cast<char*>(&player_)) + sizeof(account_id_));
}

BlockedPlayerAddedNotification::~BlockedPlayerAddedNotification() {
  // @@protoc_insertion_point(destructor:bgs.protocol.user_manager.v1.BlockedPlayerAddedNotification)
  SharedDtor();
}

void BlockedPlayerAddedNotification::SharedDtor() {
  if (this != internal_default_instance()) delete player_;
  if (this != internal_default_instance()) delete game_account_id_;
  if (this != internal_default_instance()) delete account_id_;
}

void BlockedPlayerAddedNotification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BlockedPlayerAddedNotification& BlockedPlayerAddedNotification::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BlockedPlayerAddedNotification_bgs_2flow_2fpb_2fclient_2fuser_5fmanager_5fservice_2eproto.base);
  return *internal_default_instance();
}


void BlockedPlayerAddedNotification::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.user_manager.v1.BlockedPlayerAddedNotification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(player_ != nullptr);
      player_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(game_account_id_ != nullptr);
      game_account_id_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(account_id_ != nullptr);
      account_id_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* BlockedPlayerAddedNotification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .bgs.protocol.user_manager.v1.BlockedPlayer player = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.EntityId game_account_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_game_account_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.EntityId account_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_account_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BlockedPlayerAddedNotification::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.user_manager.v1.BlockedPlayerAddedNotification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .bgs.protocol.user_manager.v1.BlockedPlayer player = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player(this), target, stream);
  }

  // optional .bgs.protocol.EntityId game_account_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::game_account_id(this), target, stream);
  }

  // optional .bgs.protocol.EntityId account_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::account_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.user_manager.v1.BlockedPlayerAddedNotification)
  return target;
}

size_t BlockedPlayerAddedNotification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.user_manager.v1.BlockedPlayerAddedNotification)
  size_t total_size = 0;

  // required .bgs.protocol.user_manager.v1.BlockedPlayer player = 1;
  if (_internal_has_player()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional .bgs.protocol.EntityId game_account_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *game_account_id_);
    }

    // optional .bgs.protocol.EntityId account_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *account_id_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BlockedPlayerAddedNotification::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.user_manager.v1.BlockedPlayerAddedNotification)
  GOOGLE_DCHECK_NE(&from, this);
  const BlockedPlayerAddedNotification* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BlockedPlayerAddedNotification>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.user_manager.v1.BlockedPlayerAddedNotification)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.user_manager.v1.BlockedPlayerAddedNotification)
    MergeFrom(*source);
  }
}

void BlockedPlayerAddedNotification::MergeFrom(const BlockedPlayerAddedNotification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.user_manager.v1.BlockedPlayerAddedNotification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_player()->::bgs::protocol::user_manager::v1::BlockedPlayer::MergeFrom(from._internal_player());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_game_account_id()->::bgs::protocol::EntityId::MergeFrom(from._internal_game_account_id());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_account_id()->::bgs::protocol::EntityId::MergeFrom(from._internal_account_id());
    }
  }
}

void BlockedPlayerAddedNotification::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.user_manager.v1.BlockedPlayerAddedNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlockedPlayerAddedNotification::CopyFrom(const BlockedPlayerAddedNotification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.user_manager.v1.BlockedPlayerAddedNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockedPlayerAddedNotification::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (_internal_has_player()) {
    if (!player_->IsInitialized()) return false;
  }
  if (_internal_has_game_account_id()) {
    if (!game_account_id_->IsInitialized()) return false;
  }
  if (_internal_has_account_id()) {
    if (!account_id_->IsInitialized()) return false;
  }
  return true;
}

void BlockedPlayerAddedNotification::InternalSwap(BlockedPlayerAddedNotification* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(player_, other->player_);
  swap(game_account_id_, other->game_account_id_);
  swap(account_id_, other->account_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BlockedPlayerAddedNotification::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BlockedPlayerRemovedNotification::InitAsDefaultInstance() {
  ::bgs::protocol::user_manager::v1::_BlockedPlayerRemovedNotification_default_instance_._instance.get_mutable()->player_ = const_cast< ::bgs::protocol::user_manager::v1::BlockedPlayer*>(
      ::bgs::protocol::user_manager::v1::BlockedPlayer::internal_default_instance());
  ::bgs::protocol::user_manager::v1::_BlockedPlayerRemovedNotification_default_instance_._instance.get_mutable()->game_account_id_ = const_cast< ::bgs::protocol::EntityId*>(
      ::bgs::protocol::EntityId::internal_default_instance());
  ::bgs::protocol::user_manager::v1::_BlockedPlayerRemovedNotification_default_instance_._instance.get_mutable()->account_id_ = const_cast< ::bgs::protocol::EntityId*>(
      ::bgs::protocol::EntityId::internal_default_instance());
}
class BlockedPlayerRemovedNotification::_Internal {
 public:
  using HasBits = decltype(std::declval<BlockedPlayerRemovedNotification>()._has_bits_);
  static const ::bgs::protocol::user_manager::v1::BlockedPlayer& player(const BlockedPlayerRemovedNotification* msg);
  static void set_has_player(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::bgs::protocol::EntityId& game_account_id(const BlockedPlayerRemovedNotification* msg);
  static void set_has_game_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::bgs::protocol::EntityId& account_id(const BlockedPlayerRemovedNotification* msg);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::bgs::protocol::user_manager::v1::BlockedPlayer&
BlockedPlayerRemovedNotification::_Internal::player(const BlockedPlayerRemovedNotification* msg) {
  return *msg->player_;
}
const ::bgs::protocol::EntityId&
BlockedPlayerRemovedNotification::_Internal::game_account_id(const BlockedPlayerRemovedNotification* msg) {
  return *msg->game_account_id_;
}
const ::bgs::protocol::EntityId&
BlockedPlayerRemovedNotification::_Internal::account_id(const BlockedPlayerRemovedNotification* msg) {
  return *msg->account_id_;
}
void BlockedPlayerRemovedNotification::clear_player() {
  if (player_ != nullptr) player_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void BlockedPlayerRemovedNotification::clear_game_account_id() {
  if (game_account_id_ != nullptr) game_account_id_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void BlockedPlayerRemovedNotification::clear_account_id() {
  if (account_id_ != nullptr) account_id_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
BlockedPlayerRemovedNotification::BlockedPlayerRemovedNotification()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.user_manager.v1.BlockedPlayerRemovedNotification)
}
BlockedPlayerRemovedNotification::BlockedPlayerRemovedNotification(const BlockedPlayerRemovedNotification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_player()) {
    player_ = new ::bgs::protocol::user_manager::v1::BlockedPlayer(*from.player_);
  } else {
    player_ = nullptr;
  }
  if (from._internal_has_game_account_id()) {
    game_account_id_ = new ::bgs::protocol::EntityId(*from.game_account_id_);
  } else {
    game_account_id_ = nullptr;
  }
  if (from._internal_has_account_id()) {
    account_id_ = new ::bgs::protocol::EntityId(*from.account_id_);
  } else {
    account_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.user_manager.v1.BlockedPlayerRemovedNotification)
}

void BlockedPlayerRemovedNotification::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BlockedPlayerRemovedNotification_bgs_2flow_2fpb_2fclient_2fuser_5fmanager_5fservice_2eproto.base);
  ::memset(&player_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&account_id_) -
      reinterpret_cast<char*>(&player_)) + sizeof(account_id_));
}

BlockedPlayerRemovedNotification::~BlockedPlayerRemovedNotification() {
  // @@protoc_insertion_point(destructor:bgs.protocol.user_manager.v1.BlockedPlayerRemovedNotification)
  SharedDtor();
}

void BlockedPlayerRemovedNotification::SharedDtor() {
  if (this != internal_default_instance()) delete player_;
  if (this != internal_default_instance()) delete game_account_id_;
  if (this != internal_default_instance()) delete account_id_;
}

void BlockedPlayerRemovedNotification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BlockedPlayerRemovedNotification& BlockedPlayerRemovedNotification::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BlockedPlayerRemovedNotification_bgs_2flow_2fpb_2fclient_2fuser_5fmanager_5fservice_2eproto.base);
  return *internal_default_instance();
}


void BlockedPlayerRemovedNotification::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.user_manager.v1.BlockedPlayerRemovedNotification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(player_ != nullptr);
      player_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(game_account_id_ != nullptr);
      game_account_id_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(account_id_ != nullptr);
      account_id_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* BlockedPlayerRemovedNotification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .bgs.protocol.user_manager.v1.BlockedPlayer player = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.EntityId game_account_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_game_account_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.EntityId account_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_account_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BlockedPlayerRemovedNotification::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.user_manager.v1.BlockedPlayerRemovedNotification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .bgs.protocol.user_manager.v1.BlockedPlayer player = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player(this), target, stream);
  }

  // optional .bgs.protocol.EntityId game_account_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::game_account_id(this), target, stream);
  }

  // optional .bgs.protocol.EntityId account_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::account_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.user_manager.v1.BlockedPlayerRemovedNotification)
  return target;
}

size_t BlockedPlayerRemovedNotification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.user_manager.v1.BlockedPlayerRemovedNotification)
  size_t total_size = 0;

  // required .bgs.protocol.user_manager.v1.BlockedPlayer player = 1;
  if (_internal_has_player()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional .bgs.protocol.EntityId game_account_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *game_account_id_);
    }

    // optional .bgs.protocol.EntityId account_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *account_id_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BlockedPlayerRemovedNotification::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.user_manager.v1.BlockedPlayerRemovedNotification)
  GOOGLE_DCHECK_NE(&from, this);
  const BlockedPlayerRemovedNotification* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BlockedPlayerRemovedNotification>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.user_manager.v1.BlockedPlayerRemovedNotification)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.user_manager.v1.BlockedPlayerRemovedNotification)
    MergeFrom(*source);
  }
}

void BlockedPlayerRemovedNotification::MergeFrom(const BlockedPlayerRemovedNotification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.user_manager.v1.BlockedPlayerRemovedNotification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_player()->::bgs::protocol::user_manager::v1::BlockedPlayer::MergeFrom(from._internal_player());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_game_account_id()->::bgs::protocol::EntityId::MergeFrom(from._internal_game_account_id());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_account_id()->::bgs::protocol::EntityId::MergeFrom(from._internal_account_id());
    }
  }
}

void BlockedPlayerRemovedNotification::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.user_manager.v1.BlockedPlayerRemovedNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlockedPlayerRemovedNotification::CopyFrom(const BlockedPlayerRemovedNotification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.user_manager.v1.BlockedPlayerRemovedNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockedPlayerRemovedNotification::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (_internal_has_player()) {
    if (!player_->IsInitialized()) return false;
  }
  if (_internal_has_game_account_id()) {
    if (!game_account_id_->IsInitialized()) return false;
  }
  if (_internal_has_account_id()) {
    if (!account_id_->IsInitialized()) return false;
  }
  return true;
}

void BlockedPlayerRemovedNotification::InternalSwap(BlockedPlayerRemovedNotification* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(player_, other->player_);
  swap(game_account_id_, other->game_account_id_);
  swap(account_id_, other->account_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BlockedPlayerRemovedNotification::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RecentPlayersAddedNotification::InitAsDefaultInstance() {
}
class RecentPlayersAddedNotification::_Internal {
 public:
  using HasBits = decltype(std::declval<RecentPlayersAddedNotification>()._has_bits_);
};

void RecentPlayersAddedNotification::clear_player() {
  player_.Clear();
}
RecentPlayersAddedNotification::RecentPlayersAddedNotification()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.user_manager.v1.RecentPlayersAddedNotification)
}
RecentPlayersAddedNotification::RecentPlayersAddedNotification(const RecentPlayersAddedNotification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      player_(from.player_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.user_manager.v1.RecentPlayersAddedNotification)
}

void RecentPlayersAddedNotification::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RecentPlayersAddedNotification_bgs_2flow_2fpb_2fclient_2fuser_5fmanager_5fservice_2eproto.base);
}

RecentPlayersAddedNotification::~RecentPlayersAddedNotification() {
  // @@protoc_insertion_point(destructor:bgs.protocol.user_manager.v1.RecentPlayersAddedNotification)
  SharedDtor();
}

void RecentPlayersAddedNotification::SharedDtor() {
}

void RecentPlayersAddedNotification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RecentPlayersAddedNotification& RecentPlayersAddedNotification::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RecentPlayersAddedNotification_bgs_2flow_2fpb_2fclient_2fuser_5fmanager_5fservice_2eproto.base);
  return *internal_default_instance();
}


void RecentPlayersAddedNotification::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.user_manager.v1.RecentPlayersAddedNotification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  player_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* RecentPlayersAddedNotification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .bgs.protocol.user_manager.v1.RecentPlayer player = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_player(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RecentPlayersAddedNotification::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.user_manager.v1.RecentPlayersAddedNotification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .bgs.protocol.user_manager.v1.RecentPlayer player = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_player_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_player(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.user_manager.v1.RecentPlayersAddedNotification)
  return target;
}

size_t RecentPlayersAddedNotification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.user_manager.v1.RecentPlayersAddedNotification)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .bgs.protocol.user_manager.v1.RecentPlayer player = 1;
  total_size += 1UL * this->_internal_player_size();
  for (const auto& msg : this->player_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RecentPlayersAddedNotification::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.user_manager.v1.RecentPlayersAddedNotification)
  GOOGLE_DCHECK_NE(&from, this);
  const RecentPlayersAddedNotification* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RecentPlayersAddedNotification>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.user_manager.v1.RecentPlayersAddedNotification)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.user_manager.v1.RecentPlayersAddedNotification)
    MergeFrom(*source);
  }
}

void RecentPlayersAddedNotification::MergeFrom(const RecentPlayersAddedNotification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.user_manager.v1.RecentPlayersAddedNotification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  player_.MergeFrom(from.player_);
}

void RecentPlayersAddedNotification::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.user_manager.v1.RecentPlayersAddedNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecentPlayersAddedNotification::CopyFrom(const RecentPlayersAddedNotification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.user_manager.v1.RecentPlayersAddedNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecentPlayersAddedNotification::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(player_)) return false;
  return true;
}

void RecentPlayersAddedNotification::InternalSwap(RecentPlayersAddedNotification* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  player_.InternalSwap(&other->player_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RecentPlayersAddedNotification::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RecentPlayersRemovedNotification::InitAsDefaultInstance() {
}
class RecentPlayersRemovedNotification::_Internal {
 public:
  using HasBits = decltype(std::declval<RecentPlayersRemovedNotification>()._has_bits_);
};

void RecentPlayersRemovedNotification::clear_player() {
  player_.Clear();
}
RecentPlayersRemovedNotification::RecentPlayersRemovedNotification()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.user_manager.v1.RecentPlayersRemovedNotification)
}
RecentPlayersRemovedNotification::RecentPlayersRemovedNotification(const RecentPlayersRemovedNotification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      player_(from.player_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.user_manager.v1.RecentPlayersRemovedNotification)
}

void RecentPlayersRemovedNotification::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RecentPlayersRemovedNotification_bgs_2flow_2fpb_2fclient_2fuser_5fmanager_5fservice_2eproto.base);
}

RecentPlayersRemovedNotification::~RecentPlayersRemovedNotification() {
  // @@protoc_insertion_point(destructor:bgs.protocol.user_manager.v1.RecentPlayersRemovedNotification)
  SharedDtor();
}

void RecentPlayersRemovedNotification::SharedDtor() {
}

void RecentPlayersRemovedNotification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RecentPlayersRemovedNotification& RecentPlayersRemovedNotification::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RecentPlayersRemovedNotification_bgs_2flow_2fpb_2fclient_2fuser_5fmanager_5fservice_2eproto.base);
  return *internal_default_instance();
}


void RecentPlayersRemovedNotification::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.user_manager.v1.RecentPlayersRemovedNotification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  player_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* RecentPlayersRemovedNotification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .bgs.protocol.user_manager.v1.RecentPlayer player = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_player(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RecentPlayersRemovedNotification::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.user_manager.v1.RecentPlayersRemovedNotification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .bgs.protocol.user_manager.v1.RecentPlayer player = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_player_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_player(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.user_manager.v1.RecentPlayersRemovedNotification)
  return target;
}

size_t RecentPlayersRemovedNotification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.user_manager.v1.RecentPlayersRemovedNotification)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .bgs.protocol.user_manager.v1.RecentPlayer player = 1;
  total_size += 1UL * this->_internal_player_size();
  for (const auto& msg : this->player_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RecentPlayersRemovedNotification::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.user_manager.v1.RecentPlayersRemovedNotification)
  GOOGLE_DCHECK_NE(&from, this);
  const RecentPlayersRemovedNotification* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RecentPlayersRemovedNotification>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.user_manager.v1.RecentPlayersRemovedNotification)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.user_manager.v1.RecentPlayersRemovedNotification)
    MergeFrom(*source);
  }
}

void RecentPlayersRemovedNotification::MergeFrom(const RecentPlayersRemovedNotification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.user_manager.v1.RecentPlayersRemovedNotification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  player_.MergeFrom(from.player_);
}

void RecentPlayersRemovedNotification::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.user_manager.v1.RecentPlayersRemovedNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecentPlayersRemovedNotification::CopyFrom(const RecentPlayersRemovedNotification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.user_manager.v1.RecentPlayersRemovedNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecentPlayersRemovedNotification::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(player_)) return false;
  return true;
}

void RecentPlayersRemovedNotification::InternalSwap(RecentPlayersRemovedNotification* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  player_.InternalSwap(&other->player_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RecentPlayersRemovedNotification::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace user_manager
}  // namespace protocol
}  // namespace bgs
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::bgs::protocol::user_manager::v1::SubscribeRequest* Arena::CreateMaybeMessage< ::bgs::protocol::user_manager::v1::SubscribeRequest >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::user_manager::v1::SubscribeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::user_manager::v1::SubscribeResponse* Arena::CreateMaybeMessage< ::bgs::protocol::user_manager::v1::SubscribeResponse >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::user_manager::v1::SubscribeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::user_manager::v1::UnsubscribeRequest* Arena::CreateMaybeMessage< ::bgs::protocol::user_manager::v1::UnsubscribeRequest >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::user_manager::v1::UnsubscribeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::user_manager::v1::AddRecentPlayersRequest* Arena::CreateMaybeMessage< ::bgs::protocol::user_manager::v1::AddRecentPlayersRequest >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::user_manager::v1::AddRecentPlayersRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::user_manager::v1::ClearRecentPlayersRequest* Arena::CreateMaybeMessage< ::bgs::protocol::user_manager::v1::ClearRecentPlayersRequest >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::user_manager::v1::ClearRecentPlayersRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::user_manager::v1::BlockPlayerRequest* Arena::CreateMaybeMessage< ::bgs::protocol::user_manager::v1::BlockPlayerRequest >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::user_manager::v1::BlockPlayerRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::user_manager::v1::UnblockPlayerRequest* Arena::CreateMaybeMessage< ::bgs::protocol::user_manager::v1::UnblockPlayerRequest >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::user_manager::v1::UnblockPlayerRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::user_manager::v1::BlockedPlayerAddedNotification* Arena::CreateMaybeMessage< ::bgs::protocol::user_manager::v1::BlockedPlayerAddedNotification >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::user_manager::v1::BlockedPlayerAddedNotification >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::user_manager::v1::BlockedPlayerRemovedNotification* Arena::CreateMaybeMessage< ::bgs::protocol::user_manager::v1::BlockedPlayerRemovedNotification >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::user_manager::v1::BlockedPlayerRemovedNotification >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::user_manager::v1::RecentPlayersAddedNotification* Arena::CreateMaybeMessage< ::bgs::protocol::user_manager::v1::RecentPlayersAddedNotification >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::user_manager::v1::RecentPlayersAddedNotification >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::user_manager::v1::RecentPlayersRemovedNotification* Arena::CreateMaybeMessage< ::bgs::protocol::user_manager::v1::RecentPlayersRemovedNotification >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::user_manager::v1::RecentPlayersRemovedNotification >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
