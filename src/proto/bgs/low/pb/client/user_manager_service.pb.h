// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bgs/low/pb/client/user_manager_service.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_bgs_2flow_2fpb_2fclient_2fuser_5fmanager_5fservice_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_bgs_2flow_2fpb_2fclient_2fuser_5fmanager_5fservice_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "bgs/low/pb/client/user_manager_types.pb.h"
#include "bgs/low/pb/client/entity_types.pb.h"
#include "bgs/low/pb/client/role_types.pb.h"
#include "bgs/low/pb/client/rpc_types.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2fuser_5fmanager_5fservice_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_bgs_2flow_2fpb_2fclient_2fuser_5fmanager_5fservice_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[11]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bgs_2flow_2fpb_2fclient_2fuser_5fmanager_5fservice_2eproto;
namespace bgs {
namespace protocol {
namespace user_manager {
namespace v1 {
class AddRecentPlayersRequest;
class AddRecentPlayersRequestDefaultTypeInternal;
extern AddRecentPlayersRequestDefaultTypeInternal _AddRecentPlayersRequest_default_instance_;
class BlockPlayerRequest;
class BlockPlayerRequestDefaultTypeInternal;
extern BlockPlayerRequestDefaultTypeInternal _BlockPlayerRequest_default_instance_;
class BlockedPlayerAddedNotification;
class BlockedPlayerAddedNotificationDefaultTypeInternal;
extern BlockedPlayerAddedNotificationDefaultTypeInternal _BlockedPlayerAddedNotification_default_instance_;
class BlockedPlayerRemovedNotification;
class BlockedPlayerRemovedNotificationDefaultTypeInternal;
extern BlockedPlayerRemovedNotificationDefaultTypeInternal _BlockedPlayerRemovedNotification_default_instance_;
class ClearRecentPlayersRequest;
class ClearRecentPlayersRequestDefaultTypeInternal;
extern ClearRecentPlayersRequestDefaultTypeInternal _ClearRecentPlayersRequest_default_instance_;
class RecentPlayersAddedNotification;
class RecentPlayersAddedNotificationDefaultTypeInternal;
extern RecentPlayersAddedNotificationDefaultTypeInternal _RecentPlayersAddedNotification_default_instance_;
class RecentPlayersRemovedNotification;
class RecentPlayersRemovedNotificationDefaultTypeInternal;
extern RecentPlayersRemovedNotificationDefaultTypeInternal _RecentPlayersRemovedNotification_default_instance_;
class SubscribeRequest;
class SubscribeRequestDefaultTypeInternal;
extern SubscribeRequestDefaultTypeInternal _SubscribeRequest_default_instance_;
class SubscribeResponse;
class SubscribeResponseDefaultTypeInternal;
extern SubscribeResponseDefaultTypeInternal _SubscribeResponse_default_instance_;
class UnblockPlayerRequest;
class UnblockPlayerRequestDefaultTypeInternal;
extern UnblockPlayerRequestDefaultTypeInternal _UnblockPlayerRequest_default_instance_;
class UnsubscribeRequest;
class UnsubscribeRequestDefaultTypeInternal;
extern UnsubscribeRequestDefaultTypeInternal _UnsubscribeRequest_default_instance_;
}  // namespace v1
}  // namespace user_manager
}  // namespace protocol
}  // namespace bgs
PROTOBUF_NAMESPACE_OPEN
template<> ::bgs::protocol::user_manager::v1::AddRecentPlayersRequest* Arena::CreateMaybeMessage<::bgs::protocol::user_manager::v1::AddRecentPlayersRequest>(Arena*);
template<> ::bgs::protocol::user_manager::v1::BlockPlayerRequest* Arena::CreateMaybeMessage<::bgs::protocol::user_manager::v1::BlockPlayerRequest>(Arena*);
template<> ::bgs::protocol::user_manager::v1::BlockedPlayerAddedNotification* Arena::CreateMaybeMessage<::bgs::protocol::user_manager::v1::BlockedPlayerAddedNotification>(Arena*);
template<> ::bgs::protocol::user_manager::v1::BlockedPlayerRemovedNotification* Arena::CreateMaybeMessage<::bgs::protocol::user_manager::v1::BlockedPlayerRemovedNotification>(Arena*);
template<> ::bgs::protocol::user_manager::v1::ClearRecentPlayersRequest* Arena::CreateMaybeMessage<::bgs::protocol::user_manager::v1::ClearRecentPlayersRequest>(Arena*);
template<> ::bgs::protocol::user_manager::v1::RecentPlayersAddedNotification* Arena::CreateMaybeMessage<::bgs::protocol::user_manager::v1::RecentPlayersAddedNotification>(Arena*);
template<> ::bgs::protocol::user_manager::v1::RecentPlayersRemovedNotification* Arena::CreateMaybeMessage<::bgs::protocol::user_manager::v1::RecentPlayersRemovedNotification>(Arena*);
template<> ::bgs::protocol::user_manager::v1::SubscribeRequest* Arena::CreateMaybeMessage<::bgs::protocol::user_manager::v1::SubscribeRequest>(Arena*);
template<> ::bgs::protocol::user_manager::v1::SubscribeResponse* Arena::CreateMaybeMessage<::bgs::protocol::user_manager::v1::SubscribeResponse>(Arena*);
template<> ::bgs::protocol::user_manager::v1::UnblockPlayerRequest* Arena::CreateMaybeMessage<::bgs::protocol::user_manager::v1::UnblockPlayerRequest>(Arena*);
template<> ::bgs::protocol::user_manager::v1::UnsubscribeRequest* Arena::CreateMaybeMessage<::bgs::protocol::user_manager::v1::UnsubscribeRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace bgs {
namespace protocol {
namespace user_manager {
namespace v1 {

// ===================================================================

class SubscribeRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.user_manager.v1.SubscribeRequest) */ {
 public:
  SubscribeRequest();
  virtual ~SubscribeRequest();

  SubscribeRequest(const SubscribeRequest& from);
  SubscribeRequest(SubscribeRequest&& from) noexcept
    : SubscribeRequest() {
    *this = ::std::move(from);
  }

  inline SubscribeRequest& operator=(const SubscribeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeRequest& operator=(SubscribeRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubscribeRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SubscribeRequest* internal_default_instance() {
    return reinterpret_cast<const SubscribeRequest*>(
               &_SubscribeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SubscribeRequest& a, SubscribeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscribeRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubscribeRequest* New() const final {
    return CreateMaybeMessage<SubscribeRequest>(nullptr);
  }

  SubscribeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubscribeRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubscribeRequest& from);
  void MergeFrom(const SubscribeRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubscribeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.user_manager.v1.SubscribeRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fuser_5fmanager_5fservice_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fuser_5fmanager_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAgentIdFieldNumber = 1,
    kObjectIdFieldNumber = 2,
  };
  // optional .bgs.protocol.EntityId agent_id = 1;
  bool has_agent_id() const;
  private:
  bool _internal_has_agent_id() const;
  public:
  void clear_agent_id();
  const ::bgs::protocol::EntityId& agent_id() const;
  ::bgs::protocol::EntityId* release_agent_id();
  ::bgs::protocol::EntityId* mutable_agent_id();
  void set_allocated_agent_id(::bgs::protocol::EntityId* agent_id);
  private:
  const ::bgs::protocol::EntityId& _internal_agent_id() const;
  ::bgs::protocol::EntityId* _internal_mutable_agent_id();
  public:

  // required uint64 object_id = 2;
  bool has_object_id() const;
  private:
  bool _internal_has_object_id() const;
  public:
  void clear_object_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 object_id() const;
  void set_object_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_object_id() const;
  void _internal_set_object_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.user_manager.v1.SubscribeRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::bgs::protocol::EntityId* agent_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 object_id_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fuser_5fmanager_5fservice_2eproto;
};
// -------------------------------------------------------------------

class SubscribeResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.user_manager.v1.SubscribeResponse) */ {
 public:
  SubscribeResponse();
  virtual ~SubscribeResponse();

  SubscribeResponse(const SubscribeResponse& from);
  SubscribeResponse(SubscribeResponse&& from) noexcept
    : SubscribeResponse() {
    *this = ::std::move(from);
  }

  inline SubscribeResponse& operator=(const SubscribeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeResponse& operator=(SubscribeResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubscribeResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SubscribeResponse* internal_default_instance() {
    return reinterpret_cast<const SubscribeResponse*>(
               &_SubscribeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SubscribeResponse& a, SubscribeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscribeResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubscribeResponse* New() const final {
    return CreateMaybeMessage<SubscribeResponse>(nullptr);
  }

  SubscribeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubscribeResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubscribeResponse& from);
  void MergeFrom(const SubscribeResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubscribeResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.user_manager.v1.SubscribeResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fuser_5fmanager_5fservice_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fuser_5fmanager_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlockedPlayersFieldNumber = 1,
    kRecentPlayersFieldNumber = 2,
    kRoleFieldNumber = 3,
  };
  // repeated .bgs.protocol.user_manager.v1.BlockedPlayer blocked_players = 1;
  int blocked_players_size() const;
  private:
  int _internal_blocked_players_size() const;
  public:
  void clear_blocked_players();
  ::bgs::protocol::user_manager::v1::BlockedPlayer* mutable_blocked_players(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::user_manager::v1::BlockedPlayer >*
      mutable_blocked_players();
  private:
  const ::bgs::protocol::user_manager::v1::BlockedPlayer& _internal_blocked_players(int index) const;
  ::bgs::protocol::user_manager::v1::BlockedPlayer* _internal_add_blocked_players();
  public:
  const ::bgs::protocol::user_manager::v1::BlockedPlayer& blocked_players(int index) const;
  ::bgs::protocol::user_manager::v1::BlockedPlayer* add_blocked_players();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::user_manager::v1::BlockedPlayer >&
      blocked_players() const;

  // repeated .bgs.protocol.user_manager.v1.RecentPlayer recent_players = 2;
  int recent_players_size() const;
  private:
  int _internal_recent_players_size() const;
  public:
  void clear_recent_players();
  ::bgs::protocol::user_manager::v1::RecentPlayer* mutable_recent_players(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::user_manager::v1::RecentPlayer >*
      mutable_recent_players();
  private:
  const ::bgs::protocol::user_manager::v1::RecentPlayer& _internal_recent_players(int index) const;
  ::bgs::protocol::user_manager::v1::RecentPlayer* _internal_add_recent_players();
  public:
  const ::bgs::protocol::user_manager::v1::RecentPlayer& recent_players(int index) const;
  ::bgs::protocol::user_manager::v1::RecentPlayer* add_recent_players();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::user_manager::v1::RecentPlayer >&
      recent_players() const;

  // repeated .bgs.protocol.Role role = 3;
  int role_size() const;
  private:
  int _internal_role_size() const;
  public:
  void clear_role();
  ::bgs::protocol::Role* mutable_role(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::Role >*
      mutable_role();
  private:
  const ::bgs::protocol::Role& _internal_role(int index) const;
  ::bgs::protocol::Role* _internal_add_role();
  public:
  const ::bgs::protocol::Role& role(int index) const;
  ::bgs::protocol::Role* add_role();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::Role >&
      role() const;

  // @@protoc_insertion_point(class_scope:bgs.protocol.user_manager.v1.SubscribeResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::user_manager::v1::BlockedPlayer > blocked_players_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::user_manager::v1::RecentPlayer > recent_players_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::Role > role_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fuser_5fmanager_5fservice_2eproto;
};
// -------------------------------------------------------------------

class UnsubscribeRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.user_manager.v1.UnsubscribeRequest) */ {
 public:
  UnsubscribeRequest();
  virtual ~UnsubscribeRequest();

  UnsubscribeRequest(const UnsubscribeRequest& from);
  UnsubscribeRequest(UnsubscribeRequest&& from) noexcept
    : UnsubscribeRequest() {
    *this = ::std::move(from);
  }

  inline UnsubscribeRequest& operator=(const UnsubscribeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnsubscribeRequest& operator=(UnsubscribeRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UnsubscribeRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UnsubscribeRequest* internal_default_instance() {
    return reinterpret_cast<const UnsubscribeRequest*>(
               &_UnsubscribeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(UnsubscribeRequest& a, UnsubscribeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UnsubscribeRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UnsubscribeRequest* New() const final {
    return CreateMaybeMessage<UnsubscribeRequest>(nullptr);
  }

  UnsubscribeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UnsubscribeRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UnsubscribeRequest& from);
  void MergeFrom(const UnsubscribeRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnsubscribeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.user_manager.v1.UnsubscribeRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fuser_5fmanager_5fservice_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fuser_5fmanager_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAgentIdFieldNumber = 1,
    kObjectIdFieldNumber = 2,
  };
  // optional .bgs.protocol.EntityId agent_id = 1;
  bool has_agent_id() const;
  private:
  bool _internal_has_agent_id() const;
  public:
  void clear_agent_id();
  const ::bgs::protocol::EntityId& agent_id() const;
  ::bgs::protocol::EntityId* release_agent_id();
  ::bgs::protocol::EntityId* mutable_agent_id();
  void set_allocated_agent_id(::bgs::protocol::EntityId* agent_id);
  private:
  const ::bgs::protocol::EntityId& _internal_agent_id() const;
  ::bgs::protocol::EntityId* _internal_mutable_agent_id();
  public:

  // optional uint64 object_id = 2;
  bool has_object_id() const;
  private:
  bool _internal_has_object_id() const;
  public:
  void clear_object_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 object_id() const;
  void set_object_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_object_id() const;
  void _internal_set_object_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.user_manager.v1.UnsubscribeRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::bgs::protocol::EntityId* agent_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 object_id_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fuser_5fmanager_5fservice_2eproto;
};
// -------------------------------------------------------------------

class AddRecentPlayersRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.user_manager.v1.AddRecentPlayersRequest) */ {
 public:
  AddRecentPlayersRequest();
  virtual ~AddRecentPlayersRequest();

  AddRecentPlayersRequest(const AddRecentPlayersRequest& from);
  AddRecentPlayersRequest(AddRecentPlayersRequest&& from) noexcept
    : AddRecentPlayersRequest() {
    *this = ::std::move(from);
  }

  inline AddRecentPlayersRequest& operator=(const AddRecentPlayersRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddRecentPlayersRequest& operator=(AddRecentPlayersRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddRecentPlayersRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddRecentPlayersRequest* internal_default_instance() {
    return reinterpret_cast<const AddRecentPlayersRequest*>(
               &_AddRecentPlayersRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(AddRecentPlayersRequest& a, AddRecentPlayersRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AddRecentPlayersRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddRecentPlayersRequest* New() const final {
    return CreateMaybeMessage<AddRecentPlayersRequest>(nullptr);
  }

  AddRecentPlayersRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddRecentPlayersRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddRecentPlayersRequest& from);
  void MergeFrom(const AddRecentPlayersRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddRecentPlayersRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.user_manager.v1.AddRecentPlayersRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fuser_5fmanager_5fservice_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fuser_5fmanager_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayersFieldNumber = 1,
    kAgentIdFieldNumber = 2,
    kProgramFieldNumber = 3,
  };
  // repeated .bgs.protocol.user_manager.v1.RecentPlayer players = 1;
  int players_size() const;
  private:
  int _internal_players_size() const;
  public:
  void clear_players();
  ::bgs::protocol::user_manager::v1::RecentPlayer* mutable_players(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::user_manager::v1::RecentPlayer >*
      mutable_players();
  private:
  const ::bgs::protocol::user_manager::v1::RecentPlayer& _internal_players(int index) const;
  ::bgs::protocol::user_manager::v1::RecentPlayer* _internal_add_players();
  public:
  const ::bgs::protocol::user_manager::v1::RecentPlayer& players(int index) const;
  ::bgs::protocol::user_manager::v1::RecentPlayer* add_players();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::user_manager::v1::RecentPlayer >&
      players() const;

  // optional .bgs.protocol.EntityId agent_id = 2;
  bool has_agent_id() const;
  private:
  bool _internal_has_agent_id() const;
  public:
  void clear_agent_id();
  const ::bgs::protocol::EntityId& agent_id() const;
  ::bgs::protocol::EntityId* release_agent_id();
  ::bgs::protocol::EntityId* mutable_agent_id();
  void set_allocated_agent_id(::bgs::protocol::EntityId* agent_id);
  private:
  const ::bgs::protocol::EntityId& _internal_agent_id() const;
  ::bgs::protocol::EntityId* _internal_mutable_agent_id();
  public:

  // optional uint32 program = 3;
  bool has_program() const;
  private:
  bool _internal_has_program() const;
  public:
  void clear_program();
  ::PROTOBUF_NAMESPACE_ID::uint32 program() const;
  void set_program(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_program() const;
  void _internal_set_program(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.user_manager.v1.AddRecentPlayersRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::user_manager::v1::RecentPlayer > players_;
  ::bgs::protocol::EntityId* agent_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 program_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fuser_5fmanager_5fservice_2eproto;
};
// -------------------------------------------------------------------

class ClearRecentPlayersRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.user_manager.v1.ClearRecentPlayersRequest) */ {
 public:
  ClearRecentPlayersRequest();
  virtual ~ClearRecentPlayersRequest();

  ClearRecentPlayersRequest(const ClearRecentPlayersRequest& from);
  ClearRecentPlayersRequest(ClearRecentPlayersRequest&& from) noexcept
    : ClearRecentPlayersRequest() {
    *this = ::std::move(from);
  }

  inline ClearRecentPlayersRequest& operator=(const ClearRecentPlayersRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClearRecentPlayersRequest& operator=(ClearRecentPlayersRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClearRecentPlayersRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClearRecentPlayersRequest* internal_default_instance() {
    return reinterpret_cast<const ClearRecentPlayersRequest*>(
               &_ClearRecentPlayersRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ClearRecentPlayersRequest& a, ClearRecentPlayersRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ClearRecentPlayersRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClearRecentPlayersRequest* New() const final {
    return CreateMaybeMessage<ClearRecentPlayersRequest>(nullptr);
  }

  ClearRecentPlayersRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClearRecentPlayersRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClearRecentPlayersRequest& from);
  void MergeFrom(const ClearRecentPlayersRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClearRecentPlayersRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.user_manager.v1.ClearRecentPlayersRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fuser_5fmanager_5fservice_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fuser_5fmanager_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAgentIdFieldNumber = 1,
    kProgramFieldNumber = 2,
  };
  // optional .bgs.protocol.EntityId agent_id = 1;
  bool has_agent_id() const;
  private:
  bool _internal_has_agent_id() const;
  public:
  void clear_agent_id();
  const ::bgs::protocol::EntityId& agent_id() const;
  ::bgs::protocol::EntityId* release_agent_id();
  ::bgs::protocol::EntityId* mutable_agent_id();
  void set_allocated_agent_id(::bgs::protocol::EntityId* agent_id);
  private:
  const ::bgs::protocol::EntityId& _internal_agent_id() const;
  ::bgs::protocol::EntityId* _internal_mutable_agent_id();
  public:

  // optional uint32 program = 2;
  bool has_program() const;
  private:
  bool _internal_has_program() const;
  public:
  void clear_program();
  ::PROTOBUF_NAMESPACE_ID::uint32 program() const;
  void set_program(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_program() const;
  void _internal_set_program(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.user_manager.v1.ClearRecentPlayersRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::bgs::protocol::EntityId* agent_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 program_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fuser_5fmanager_5fservice_2eproto;
};
// -------------------------------------------------------------------

class BlockPlayerRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.user_manager.v1.BlockPlayerRequest) */ {
 public:
  BlockPlayerRequest();
  virtual ~BlockPlayerRequest();

  BlockPlayerRequest(const BlockPlayerRequest& from);
  BlockPlayerRequest(BlockPlayerRequest&& from) noexcept
    : BlockPlayerRequest() {
    *this = ::std::move(from);
  }

  inline BlockPlayerRequest& operator=(const BlockPlayerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlockPlayerRequest& operator=(BlockPlayerRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BlockPlayerRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BlockPlayerRequest* internal_default_instance() {
    return reinterpret_cast<const BlockPlayerRequest*>(
               &_BlockPlayerRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(BlockPlayerRequest& a, BlockPlayerRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(BlockPlayerRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BlockPlayerRequest* New() const final {
    return CreateMaybeMessage<BlockPlayerRequest>(nullptr);
  }

  BlockPlayerRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BlockPlayerRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BlockPlayerRequest& from);
  void MergeFrom(const BlockPlayerRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BlockPlayerRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.user_manager.v1.BlockPlayerRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fuser_5fmanager_5fservice_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fuser_5fmanager_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAgentIdFieldNumber = 1,
    kTargetIdFieldNumber = 2,
    kRoleFieldNumber = 3,
  };
  // optional .bgs.protocol.EntityId agent_id = 1;
  bool has_agent_id() const;
  private:
  bool _internal_has_agent_id() const;
  public:
  void clear_agent_id();
  const ::bgs::protocol::EntityId& agent_id() const;
  ::bgs::protocol::EntityId* release_agent_id();
  ::bgs::protocol::EntityId* mutable_agent_id();
  void set_allocated_agent_id(::bgs::protocol::EntityId* agent_id);
  private:
  const ::bgs::protocol::EntityId& _internal_agent_id() const;
  ::bgs::protocol::EntityId* _internal_mutable_agent_id();
  public:

  // required .bgs.protocol.EntityId target_id = 2;
  bool has_target_id() const;
  private:
  bool _internal_has_target_id() const;
  public:
  void clear_target_id();
  const ::bgs::protocol::EntityId& target_id() const;
  ::bgs::protocol::EntityId* release_target_id();
  ::bgs::protocol::EntityId* mutable_target_id();
  void set_allocated_target_id(::bgs::protocol::EntityId* target_id);
  private:
  const ::bgs::protocol::EntityId& _internal_target_id() const;
  ::bgs::protocol::EntityId* _internal_mutable_target_id();
  public:

  // optional uint32 role = 3;
  bool has_role() const;
  private:
  bool _internal_has_role() const;
  public:
  void clear_role();
  ::PROTOBUF_NAMESPACE_ID::uint32 role() const;
  void set_role(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_role() const;
  void _internal_set_role(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.user_manager.v1.BlockPlayerRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::bgs::protocol::EntityId* agent_id_;
  ::bgs::protocol::EntityId* target_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 role_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fuser_5fmanager_5fservice_2eproto;
};
// -------------------------------------------------------------------

class UnblockPlayerRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.user_manager.v1.UnblockPlayerRequest) */ {
 public:
  UnblockPlayerRequest();
  virtual ~UnblockPlayerRequest();

  UnblockPlayerRequest(const UnblockPlayerRequest& from);
  UnblockPlayerRequest(UnblockPlayerRequest&& from) noexcept
    : UnblockPlayerRequest() {
    *this = ::std::move(from);
  }

  inline UnblockPlayerRequest& operator=(const UnblockPlayerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnblockPlayerRequest& operator=(UnblockPlayerRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UnblockPlayerRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UnblockPlayerRequest* internal_default_instance() {
    return reinterpret_cast<const UnblockPlayerRequest*>(
               &_UnblockPlayerRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(UnblockPlayerRequest& a, UnblockPlayerRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UnblockPlayerRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UnblockPlayerRequest* New() const final {
    return CreateMaybeMessage<UnblockPlayerRequest>(nullptr);
  }

  UnblockPlayerRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UnblockPlayerRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UnblockPlayerRequest& from);
  void MergeFrom(const UnblockPlayerRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnblockPlayerRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.user_manager.v1.UnblockPlayerRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fuser_5fmanager_5fservice_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fuser_5fmanager_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAgentIdFieldNumber = 1,
    kTargetIdFieldNumber = 2,
  };
  // optional .bgs.protocol.EntityId agent_id = 1;
  bool has_agent_id() const;
  private:
  bool _internal_has_agent_id() const;
  public:
  void clear_agent_id();
  const ::bgs::protocol::EntityId& agent_id() const;
  ::bgs::protocol::EntityId* release_agent_id();
  ::bgs::protocol::EntityId* mutable_agent_id();
  void set_allocated_agent_id(::bgs::protocol::EntityId* agent_id);
  private:
  const ::bgs::protocol::EntityId& _internal_agent_id() const;
  ::bgs::protocol::EntityId* _internal_mutable_agent_id();
  public:

  // required .bgs.protocol.EntityId target_id = 2;
  bool has_target_id() const;
  private:
  bool _internal_has_target_id() const;
  public:
  void clear_target_id();
  const ::bgs::protocol::EntityId& target_id() const;
  ::bgs::protocol::EntityId* release_target_id();
  ::bgs::protocol::EntityId* mutable_target_id();
  void set_allocated_target_id(::bgs::protocol::EntityId* target_id);
  private:
  const ::bgs::protocol::EntityId& _internal_target_id() const;
  ::bgs::protocol::EntityId* _internal_mutable_target_id();
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.user_manager.v1.UnblockPlayerRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::bgs::protocol::EntityId* agent_id_;
  ::bgs::protocol::EntityId* target_id_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fuser_5fmanager_5fservice_2eproto;
};
// -------------------------------------------------------------------

class BlockedPlayerAddedNotification :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.user_manager.v1.BlockedPlayerAddedNotification) */ {
 public:
  BlockedPlayerAddedNotification();
  virtual ~BlockedPlayerAddedNotification();

  BlockedPlayerAddedNotification(const BlockedPlayerAddedNotification& from);
  BlockedPlayerAddedNotification(BlockedPlayerAddedNotification&& from) noexcept
    : BlockedPlayerAddedNotification() {
    *this = ::std::move(from);
  }

  inline BlockedPlayerAddedNotification& operator=(const BlockedPlayerAddedNotification& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlockedPlayerAddedNotification& operator=(BlockedPlayerAddedNotification&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BlockedPlayerAddedNotification& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BlockedPlayerAddedNotification* internal_default_instance() {
    return reinterpret_cast<const BlockedPlayerAddedNotification*>(
               &_BlockedPlayerAddedNotification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(BlockedPlayerAddedNotification& a, BlockedPlayerAddedNotification& b) {
    a.Swap(&b);
  }
  inline void Swap(BlockedPlayerAddedNotification* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BlockedPlayerAddedNotification* New() const final {
    return CreateMaybeMessage<BlockedPlayerAddedNotification>(nullptr);
  }

  BlockedPlayerAddedNotification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BlockedPlayerAddedNotification>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BlockedPlayerAddedNotification& from);
  void MergeFrom(const BlockedPlayerAddedNotification& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BlockedPlayerAddedNotification* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.user_manager.v1.BlockedPlayerAddedNotification";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fuser_5fmanager_5fservice_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fuser_5fmanager_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerFieldNumber = 1,
    kGameAccountIdFieldNumber = 2,
    kAccountIdFieldNumber = 3,
  };
  // required .bgs.protocol.user_manager.v1.BlockedPlayer player = 1;
  bool has_player() const;
  private:
  bool _internal_has_player() const;
  public:
  void clear_player();
  const ::bgs::protocol::user_manager::v1::BlockedPlayer& player() const;
  ::bgs::protocol::user_manager::v1::BlockedPlayer* release_player();
  ::bgs::protocol::user_manager::v1::BlockedPlayer* mutable_player();
  void set_allocated_player(::bgs::protocol::user_manager::v1::BlockedPlayer* player);
  private:
  const ::bgs::protocol::user_manager::v1::BlockedPlayer& _internal_player() const;
  ::bgs::protocol::user_manager::v1::BlockedPlayer* _internal_mutable_player();
  public:

  // optional .bgs.protocol.EntityId game_account_id = 2;
  bool has_game_account_id() const;
  private:
  bool _internal_has_game_account_id() const;
  public:
  void clear_game_account_id();
  const ::bgs::protocol::EntityId& game_account_id() const;
  ::bgs::protocol::EntityId* release_game_account_id();
  ::bgs::protocol::EntityId* mutable_game_account_id();
  void set_allocated_game_account_id(::bgs::protocol::EntityId* game_account_id);
  private:
  const ::bgs::protocol::EntityId& _internal_game_account_id() const;
  ::bgs::protocol::EntityId* _internal_mutable_game_account_id();
  public:

  // optional .bgs.protocol.EntityId account_id = 3;
  bool has_account_id() const;
  private:
  bool _internal_has_account_id() const;
  public:
  void clear_account_id();
  const ::bgs::protocol::EntityId& account_id() const;
  ::bgs::protocol::EntityId* release_account_id();
  ::bgs::protocol::EntityId* mutable_account_id();
  void set_allocated_account_id(::bgs::protocol::EntityId* account_id);
  private:
  const ::bgs::protocol::EntityId& _internal_account_id() const;
  ::bgs::protocol::EntityId* _internal_mutable_account_id();
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.user_manager.v1.BlockedPlayerAddedNotification)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::bgs::protocol::user_manager::v1::BlockedPlayer* player_;
  ::bgs::protocol::EntityId* game_account_id_;
  ::bgs::protocol::EntityId* account_id_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fuser_5fmanager_5fservice_2eproto;
};
// -------------------------------------------------------------------

class BlockedPlayerRemovedNotification :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.user_manager.v1.BlockedPlayerRemovedNotification) */ {
 public:
  BlockedPlayerRemovedNotification();
  virtual ~BlockedPlayerRemovedNotification();

  BlockedPlayerRemovedNotification(const BlockedPlayerRemovedNotification& from);
  BlockedPlayerRemovedNotification(BlockedPlayerRemovedNotification&& from) noexcept
    : BlockedPlayerRemovedNotification() {
    *this = ::std::move(from);
  }

  inline BlockedPlayerRemovedNotification& operator=(const BlockedPlayerRemovedNotification& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlockedPlayerRemovedNotification& operator=(BlockedPlayerRemovedNotification&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BlockedPlayerRemovedNotification& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BlockedPlayerRemovedNotification* internal_default_instance() {
    return reinterpret_cast<const BlockedPlayerRemovedNotification*>(
               &_BlockedPlayerRemovedNotification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(BlockedPlayerRemovedNotification& a, BlockedPlayerRemovedNotification& b) {
    a.Swap(&b);
  }
  inline void Swap(BlockedPlayerRemovedNotification* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BlockedPlayerRemovedNotification* New() const final {
    return CreateMaybeMessage<BlockedPlayerRemovedNotification>(nullptr);
  }

  BlockedPlayerRemovedNotification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BlockedPlayerRemovedNotification>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BlockedPlayerRemovedNotification& from);
  void MergeFrom(const BlockedPlayerRemovedNotification& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BlockedPlayerRemovedNotification* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.user_manager.v1.BlockedPlayerRemovedNotification";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fuser_5fmanager_5fservice_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fuser_5fmanager_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerFieldNumber = 1,
    kGameAccountIdFieldNumber = 2,
    kAccountIdFieldNumber = 3,
  };
  // required .bgs.protocol.user_manager.v1.BlockedPlayer player = 1;
  bool has_player() const;
  private:
  bool _internal_has_player() const;
  public:
  void clear_player();
  const ::bgs::protocol::user_manager::v1::BlockedPlayer& player() const;
  ::bgs::protocol::user_manager::v1::BlockedPlayer* release_player();
  ::bgs::protocol::user_manager::v1::BlockedPlayer* mutable_player();
  void set_allocated_player(::bgs::protocol::user_manager::v1::BlockedPlayer* player);
  private:
  const ::bgs::protocol::user_manager::v1::BlockedPlayer& _internal_player() const;
  ::bgs::protocol::user_manager::v1::BlockedPlayer* _internal_mutable_player();
  public:

  // optional .bgs.protocol.EntityId game_account_id = 2;
  bool has_game_account_id() const;
  private:
  bool _internal_has_game_account_id() const;
  public:
  void clear_game_account_id();
  const ::bgs::protocol::EntityId& game_account_id() const;
  ::bgs::protocol::EntityId* release_game_account_id();
  ::bgs::protocol::EntityId* mutable_game_account_id();
  void set_allocated_game_account_id(::bgs::protocol::EntityId* game_account_id);
  private:
  const ::bgs::protocol::EntityId& _internal_game_account_id() const;
  ::bgs::protocol::EntityId* _internal_mutable_game_account_id();
  public:

  // optional .bgs.protocol.EntityId account_id = 3;
  bool has_account_id() const;
  private:
  bool _internal_has_account_id() const;
  public:
  void clear_account_id();
  const ::bgs::protocol::EntityId& account_id() const;
  ::bgs::protocol::EntityId* release_account_id();
  ::bgs::protocol::EntityId* mutable_account_id();
  void set_allocated_account_id(::bgs::protocol::EntityId* account_id);
  private:
  const ::bgs::protocol::EntityId& _internal_account_id() const;
  ::bgs::protocol::EntityId* _internal_mutable_account_id();
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.user_manager.v1.BlockedPlayerRemovedNotification)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::bgs::protocol::user_manager::v1::BlockedPlayer* player_;
  ::bgs::protocol::EntityId* game_account_id_;
  ::bgs::protocol::EntityId* account_id_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fuser_5fmanager_5fservice_2eproto;
};
// -------------------------------------------------------------------

class RecentPlayersAddedNotification :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.user_manager.v1.RecentPlayersAddedNotification) */ {
 public:
  RecentPlayersAddedNotification();
  virtual ~RecentPlayersAddedNotification();

  RecentPlayersAddedNotification(const RecentPlayersAddedNotification& from);
  RecentPlayersAddedNotification(RecentPlayersAddedNotification&& from) noexcept
    : RecentPlayersAddedNotification() {
    *this = ::std::move(from);
  }

  inline RecentPlayersAddedNotification& operator=(const RecentPlayersAddedNotification& from) {
    CopyFrom(from);
    return *this;
  }
  inline RecentPlayersAddedNotification& operator=(RecentPlayersAddedNotification&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RecentPlayersAddedNotification& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RecentPlayersAddedNotification* internal_default_instance() {
    return reinterpret_cast<const RecentPlayersAddedNotification*>(
               &_RecentPlayersAddedNotification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(RecentPlayersAddedNotification& a, RecentPlayersAddedNotification& b) {
    a.Swap(&b);
  }
  inline void Swap(RecentPlayersAddedNotification* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RecentPlayersAddedNotification* New() const final {
    return CreateMaybeMessage<RecentPlayersAddedNotification>(nullptr);
  }

  RecentPlayersAddedNotification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RecentPlayersAddedNotification>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RecentPlayersAddedNotification& from);
  void MergeFrom(const RecentPlayersAddedNotification& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecentPlayersAddedNotification* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.user_manager.v1.RecentPlayersAddedNotification";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fuser_5fmanager_5fservice_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fuser_5fmanager_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerFieldNumber = 1,
  };
  // repeated .bgs.protocol.user_manager.v1.RecentPlayer player = 1;
  int player_size() const;
  private:
  int _internal_player_size() const;
  public:
  void clear_player();
  ::bgs::protocol::user_manager::v1::RecentPlayer* mutable_player(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::user_manager::v1::RecentPlayer >*
      mutable_player();
  private:
  const ::bgs::protocol::user_manager::v1::RecentPlayer& _internal_player(int index) const;
  ::bgs::protocol::user_manager::v1::RecentPlayer* _internal_add_player();
  public:
  const ::bgs::protocol::user_manager::v1::RecentPlayer& player(int index) const;
  ::bgs::protocol::user_manager::v1::RecentPlayer* add_player();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::user_manager::v1::RecentPlayer >&
      player() const;

  // @@protoc_insertion_point(class_scope:bgs.protocol.user_manager.v1.RecentPlayersAddedNotification)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::user_manager::v1::RecentPlayer > player_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fuser_5fmanager_5fservice_2eproto;
};
// -------------------------------------------------------------------

class RecentPlayersRemovedNotification :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.user_manager.v1.RecentPlayersRemovedNotification) */ {
 public:
  RecentPlayersRemovedNotification();
  virtual ~RecentPlayersRemovedNotification();

  RecentPlayersRemovedNotification(const RecentPlayersRemovedNotification& from);
  RecentPlayersRemovedNotification(RecentPlayersRemovedNotification&& from) noexcept
    : RecentPlayersRemovedNotification() {
    *this = ::std::move(from);
  }

  inline RecentPlayersRemovedNotification& operator=(const RecentPlayersRemovedNotification& from) {
    CopyFrom(from);
    return *this;
  }
  inline RecentPlayersRemovedNotification& operator=(RecentPlayersRemovedNotification&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RecentPlayersRemovedNotification& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RecentPlayersRemovedNotification* internal_default_instance() {
    return reinterpret_cast<const RecentPlayersRemovedNotification*>(
               &_RecentPlayersRemovedNotification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(RecentPlayersRemovedNotification& a, RecentPlayersRemovedNotification& b) {
    a.Swap(&b);
  }
  inline void Swap(RecentPlayersRemovedNotification* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RecentPlayersRemovedNotification* New() const final {
    return CreateMaybeMessage<RecentPlayersRemovedNotification>(nullptr);
  }

  RecentPlayersRemovedNotification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RecentPlayersRemovedNotification>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RecentPlayersRemovedNotification& from);
  void MergeFrom(const RecentPlayersRemovedNotification& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecentPlayersRemovedNotification* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.user_manager.v1.RecentPlayersRemovedNotification";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fuser_5fmanager_5fservice_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fuser_5fmanager_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerFieldNumber = 1,
  };
  // repeated .bgs.protocol.user_manager.v1.RecentPlayer player = 1;
  int player_size() const;
  private:
  int _internal_player_size() const;
  public:
  void clear_player();
  ::bgs::protocol::user_manager::v1::RecentPlayer* mutable_player(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::user_manager::v1::RecentPlayer >*
      mutable_player();
  private:
  const ::bgs::protocol::user_manager::v1::RecentPlayer& _internal_player(int index) const;
  ::bgs::protocol::user_manager::v1::RecentPlayer* _internal_add_player();
  public:
  const ::bgs::protocol::user_manager::v1::RecentPlayer& player(int index) const;
  ::bgs::protocol::user_manager::v1::RecentPlayer* add_player();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::user_manager::v1::RecentPlayer >&
      player() const;

  // @@protoc_insertion_point(class_scope:bgs.protocol.user_manager.v1.RecentPlayersRemovedNotification)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::user_manager::v1::RecentPlayer > player_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fuser_5fmanager_5fservice_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SubscribeRequest

// optional .bgs.protocol.EntityId agent_id = 1;
inline bool SubscribeRequest::_internal_has_agent_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || agent_id_ != nullptr);
  return value;
}
inline bool SubscribeRequest::has_agent_id() const {
  return _internal_has_agent_id();
}
inline const ::bgs::protocol::EntityId& SubscribeRequest::_internal_agent_id() const {
  const ::bgs::protocol::EntityId* p = agent_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::EntityId*>(
      &::bgs::protocol::_EntityId_default_instance_);
}
inline const ::bgs::protocol::EntityId& SubscribeRequest::agent_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.user_manager.v1.SubscribeRequest.agent_id)
  return _internal_agent_id();
}
inline ::bgs::protocol::EntityId* SubscribeRequest::release_agent_id() {
  // @@protoc_insertion_point(field_release:bgs.protocol.user_manager.v1.SubscribeRequest.agent_id)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::EntityId* temp = agent_id_;
  agent_id_ = nullptr;
  return temp;
}
inline ::bgs::protocol::EntityId* SubscribeRequest::_internal_mutable_agent_id() {
  _has_bits_[0] |= 0x00000001u;
  if (agent_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::EntityId>(GetArenaNoVirtual());
    agent_id_ = p;
  }
  return agent_id_;
}
inline ::bgs::protocol::EntityId* SubscribeRequest::mutable_agent_id() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.user_manager.v1.SubscribeRequest.agent_id)
  return _internal_mutable_agent_id();
}
inline void SubscribeRequest::set_allocated_agent_id(::bgs::protocol::EntityId* agent_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(agent_id_);
  }
  if (agent_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      agent_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, agent_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  agent_id_ = agent_id;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.user_manager.v1.SubscribeRequest.agent_id)
}

// required uint64 object_id = 2;
inline bool SubscribeRequest::_internal_has_object_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SubscribeRequest::has_object_id() const {
  return _internal_has_object_id();
}
inline void SubscribeRequest::clear_object_id() {
  object_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SubscribeRequest::_internal_object_id() const {
  return object_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SubscribeRequest::object_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.user_manager.v1.SubscribeRequest.object_id)
  return _internal_object_id();
}
inline void SubscribeRequest::_internal_set_object_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  object_id_ = value;
}
inline void SubscribeRequest::set_object_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_object_id(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.user_manager.v1.SubscribeRequest.object_id)
}

// -------------------------------------------------------------------

// SubscribeResponse

// repeated .bgs.protocol.user_manager.v1.BlockedPlayer blocked_players = 1;
inline int SubscribeResponse::_internal_blocked_players_size() const {
  return blocked_players_.size();
}
inline int SubscribeResponse::blocked_players_size() const {
  return _internal_blocked_players_size();
}
inline ::bgs::protocol::user_manager::v1::BlockedPlayer* SubscribeResponse::mutable_blocked_players(int index) {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.user_manager.v1.SubscribeResponse.blocked_players)
  return blocked_players_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::user_manager::v1::BlockedPlayer >*
SubscribeResponse::mutable_blocked_players() {
  // @@protoc_insertion_point(field_mutable_list:bgs.protocol.user_manager.v1.SubscribeResponse.blocked_players)
  return &blocked_players_;
}
inline const ::bgs::protocol::user_manager::v1::BlockedPlayer& SubscribeResponse::_internal_blocked_players(int index) const {
  return blocked_players_.Get(index);
}
inline const ::bgs::protocol::user_manager::v1::BlockedPlayer& SubscribeResponse::blocked_players(int index) const {
  // @@protoc_insertion_point(field_get:bgs.protocol.user_manager.v1.SubscribeResponse.blocked_players)
  return _internal_blocked_players(index);
}
inline ::bgs::protocol::user_manager::v1::BlockedPlayer* SubscribeResponse::_internal_add_blocked_players() {
  return blocked_players_.Add();
}
inline ::bgs::protocol::user_manager::v1::BlockedPlayer* SubscribeResponse::add_blocked_players() {
  // @@protoc_insertion_point(field_add:bgs.protocol.user_manager.v1.SubscribeResponse.blocked_players)
  return _internal_add_blocked_players();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::user_manager::v1::BlockedPlayer >&
SubscribeResponse::blocked_players() const {
  // @@protoc_insertion_point(field_list:bgs.protocol.user_manager.v1.SubscribeResponse.blocked_players)
  return blocked_players_;
}

// repeated .bgs.protocol.user_manager.v1.RecentPlayer recent_players = 2;
inline int SubscribeResponse::_internal_recent_players_size() const {
  return recent_players_.size();
}
inline int SubscribeResponse::recent_players_size() const {
  return _internal_recent_players_size();
}
inline ::bgs::protocol::user_manager::v1::RecentPlayer* SubscribeResponse::mutable_recent_players(int index) {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.user_manager.v1.SubscribeResponse.recent_players)
  return recent_players_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::user_manager::v1::RecentPlayer >*
SubscribeResponse::mutable_recent_players() {
  // @@protoc_insertion_point(field_mutable_list:bgs.protocol.user_manager.v1.SubscribeResponse.recent_players)
  return &recent_players_;
}
inline const ::bgs::protocol::user_manager::v1::RecentPlayer& SubscribeResponse::_internal_recent_players(int index) const {
  return recent_players_.Get(index);
}
inline const ::bgs::protocol::user_manager::v1::RecentPlayer& SubscribeResponse::recent_players(int index) const {
  // @@protoc_insertion_point(field_get:bgs.protocol.user_manager.v1.SubscribeResponse.recent_players)
  return _internal_recent_players(index);
}
inline ::bgs::protocol::user_manager::v1::RecentPlayer* SubscribeResponse::_internal_add_recent_players() {
  return recent_players_.Add();
}
inline ::bgs::protocol::user_manager::v1::RecentPlayer* SubscribeResponse::add_recent_players() {
  // @@protoc_insertion_point(field_add:bgs.protocol.user_manager.v1.SubscribeResponse.recent_players)
  return _internal_add_recent_players();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::user_manager::v1::RecentPlayer >&
SubscribeResponse::recent_players() const {
  // @@protoc_insertion_point(field_list:bgs.protocol.user_manager.v1.SubscribeResponse.recent_players)
  return recent_players_;
}

// repeated .bgs.protocol.Role role = 3;
inline int SubscribeResponse::_internal_role_size() const {
  return role_.size();
}
inline int SubscribeResponse::role_size() const {
  return _internal_role_size();
}
inline ::bgs::protocol::Role* SubscribeResponse::mutable_role(int index) {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.user_manager.v1.SubscribeResponse.role)
  return role_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::Role >*
SubscribeResponse::mutable_role() {
  // @@protoc_insertion_point(field_mutable_list:bgs.protocol.user_manager.v1.SubscribeResponse.role)
  return &role_;
}
inline const ::bgs::protocol::Role& SubscribeResponse::_internal_role(int index) const {
  return role_.Get(index);
}
inline const ::bgs::protocol::Role& SubscribeResponse::role(int index) const {
  // @@protoc_insertion_point(field_get:bgs.protocol.user_manager.v1.SubscribeResponse.role)
  return _internal_role(index);
}
inline ::bgs::protocol::Role* SubscribeResponse::_internal_add_role() {
  return role_.Add();
}
inline ::bgs::protocol::Role* SubscribeResponse::add_role() {
  // @@protoc_insertion_point(field_add:bgs.protocol.user_manager.v1.SubscribeResponse.role)
  return _internal_add_role();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::Role >&
SubscribeResponse::role() const {
  // @@protoc_insertion_point(field_list:bgs.protocol.user_manager.v1.SubscribeResponse.role)
  return role_;
}

// -------------------------------------------------------------------

// UnsubscribeRequest

// optional .bgs.protocol.EntityId agent_id = 1;
inline bool UnsubscribeRequest::_internal_has_agent_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || agent_id_ != nullptr);
  return value;
}
inline bool UnsubscribeRequest::has_agent_id() const {
  return _internal_has_agent_id();
}
inline const ::bgs::protocol::EntityId& UnsubscribeRequest::_internal_agent_id() const {
  const ::bgs::protocol::EntityId* p = agent_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::EntityId*>(
      &::bgs::protocol::_EntityId_default_instance_);
}
inline const ::bgs::protocol::EntityId& UnsubscribeRequest::agent_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.user_manager.v1.UnsubscribeRequest.agent_id)
  return _internal_agent_id();
}
inline ::bgs::protocol::EntityId* UnsubscribeRequest::release_agent_id() {
  // @@protoc_insertion_point(field_release:bgs.protocol.user_manager.v1.UnsubscribeRequest.agent_id)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::EntityId* temp = agent_id_;
  agent_id_ = nullptr;
  return temp;
}
inline ::bgs::protocol::EntityId* UnsubscribeRequest::_internal_mutable_agent_id() {
  _has_bits_[0] |= 0x00000001u;
  if (agent_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::EntityId>(GetArenaNoVirtual());
    agent_id_ = p;
  }
  return agent_id_;
}
inline ::bgs::protocol::EntityId* UnsubscribeRequest::mutable_agent_id() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.user_manager.v1.UnsubscribeRequest.agent_id)
  return _internal_mutable_agent_id();
}
inline void UnsubscribeRequest::set_allocated_agent_id(::bgs::protocol::EntityId* agent_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(agent_id_);
  }
  if (agent_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      agent_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, agent_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  agent_id_ = agent_id;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.user_manager.v1.UnsubscribeRequest.agent_id)
}

// optional uint64 object_id = 2;
inline bool UnsubscribeRequest::_internal_has_object_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool UnsubscribeRequest::has_object_id() const {
  return _internal_has_object_id();
}
inline void UnsubscribeRequest::clear_object_id() {
  object_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UnsubscribeRequest::_internal_object_id() const {
  return object_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UnsubscribeRequest::object_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.user_manager.v1.UnsubscribeRequest.object_id)
  return _internal_object_id();
}
inline void UnsubscribeRequest::_internal_set_object_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  object_id_ = value;
}
inline void UnsubscribeRequest::set_object_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_object_id(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.user_manager.v1.UnsubscribeRequest.object_id)
}

// -------------------------------------------------------------------

// AddRecentPlayersRequest

// repeated .bgs.protocol.user_manager.v1.RecentPlayer players = 1;
inline int AddRecentPlayersRequest::_internal_players_size() const {
  return players_.size();
}
inline int AddRecentPlayersRequest::players_size() const {
  return _internal_players_size();
}
inline ::bgs::protocol::user_manager::v1::RecentPlayer* AddRecentPlayersRequest::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.user_manager.v1.AddRecentPlayersRequest.players)
  return players_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::user_manager::v1::RecentPlayer >*
AddRecentPlayersRequest::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:bgs.protocol.user_manager.v1.AddRecentPlayersRequest.players)
  return &players_;
}
inline const ::bgs::protocol::user_manager::v1::RecentPlayer& AddRecentPlayersRequest::_internal_players(int index) const {
  return players_.Get(index);
}
inline const ::bgs::protocol::user_manager::v1::RecentPlayer& AddRecentPlayersRequest::players(int index) const {
  // @@protoc_insertion_point(field_get:bgs.protocol.user_manager.v1.AddRecentPlayersRequest.players)
  return _internal_players(index);
}
inline ::bgs::protocol::user_manager::v1::RecentPlayer* AddRecentPlayersRequest::_internal_add_players() {
  return players_.Add();
}
inline ::bgs::protocol::user_manager::v1::RecentPlayer* AddRecentPlayersRequest::add_players() {
  // @@protoc_insertion_point(field_add:bgs.protocol.user_manager.v1.AddRecentPlayersRequest.players)
  return _internal_add_players();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::user_manager::v1::RecentPlayer >&
AddRecentPlayersRequest::players() const {
  // @@protoc_insertion_point(field_list:bgs.protocol.user_manager.v1.AddRecentPlayersRequest.players)
  return players_;
}

// optional .bgs.protocol.EntityId agent_id = 2;
inline bool AddRecentPlayersRequest::_internal_has_agent_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || agent_id_ != nullptr);
  return value;
}
inline bool AddRecentPlayersRequest::has_agent_id() const {
  return _internal_has_agent_id();
}
inline const ::bgs::protocol::EntityId& AddRecentPlayersRequest::_internal_agent_id() const {
  const ::bgs::protocol::EntityId* p = agent_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::EntityId*>(
      &::bgs::protocol::_EntityId_default_instance_);
}
inline const ::bgs::protocol::EntityId& AddRecentPlayersRequest::agent_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.user_manager.v1.AddRecentPlayersRequest.agent_id)
  return _internal_agent_id();
}
inline ::bgs::protocol::EntityId* AddRecentPlayersRequest::release_agent_id() {
  // @@protoc_insertion_point(field_release:bgs.protocol.user_manager.v1.AddRecentPlayersRequest.agent_id)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::EntityId* temp = agent_id_;
  agent_id_ = nullptr;
  return temp;
}
inline ::bgs::protocol::EntityId* AddRecentPlayersRequest::_internal_mutable_agent_id() {
  _has_bits_[0] |= 0x00000001u;
  if (agent_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::EntityId>(GetArenaNoVirtual());
    agent_id_ = p;
  }
  return agent_id_;
}
inline ::bgs::protocol::EntityId* AddRecentPlayersRequest::mutable_agent_id() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.user_manager.v1.AddRecentPlayersRequest.agent_id)
  return _internal_mutable_agent_id();
}
inline void AddRecentPlayersRequest::set_allocated_agent_id(::bgs::protocol::EntityId* agent_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(agent_id_);
  }
  if (agent_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      agent_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, agent_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  agent_id_ = agent_id;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.user_manager.v1.AddRecentPlayersRequest.agent_id)
}

// optional uint32 program = 3;
inline bool AddRecentPlayersRequest::_internal_has_program() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AddRecentPlayersRequest::has_program() const {
  return _internal_has_program();
}
inline void AddRecentPlayersRequest::clear_program() {
  program_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AddRecentPlayersRequest::_internal_program() const {
  return program_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AddRecentPlayersRequest::program() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.user_manager.v1.AddRecentPlayersRequest.program)
  return _internal_program();
}
inline void AddRecentPlayersRequest::_internal_set_program(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  program_ = value;
}
inline void AddRecentPlayersRequest::set_program(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_program(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.user_manager.v1.AddRecentPlayersRequest.program)
}

// -------------------------------------------------------------------

// ClearRecentPlayersRequest

// optional .bgs.protocol.EntityId agent_id = 1;
inline bool ClearRecentPlayersRequest::_internal_has_agent_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || agent_id_ != nullptr);
  return value;
}
inline bool ClearRecentPlayersRequest::has_agent_id() const {
  return _internal_has_agent_id();
}
inline const ::bgs::protocol::EntityId& ClearRecentPlayersRequest::_internal_agent_id() const {
  const ::bgs::protocol::EntityId* p = agent_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::EntityId*>(
      &::bgs::protocol::_EntityId_default_instance_);
}
inline const ::bgs::protocol::EntityId& ClearRecentPlayersRequest::agent_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.user_manager.v1.ClearRecentPlayersRequest.agent_id)
  return _internal_agent_id();
}
inline ::bgs::protocol::EntityId* ClearRecentPlayersRequest::release_agent_id() {
  // @@protoc_insertion_point(field_release:bgs.protocol.user_manager.v1.ClearRecentPlayersRequest.agent_id)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::EntityId* temp = agent_id_;
  agent_id_ = nullptr;
  return temp;
}
inline ::bgs::protocol::EntityId* ClearRecentPlayersRequest::_internal_mutable_agent_id() {
  _has_bits_[0] |= 0x00000001u;
  if (agent_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::EntityId>(GetArenaNoVirtual());
    agent_id_ = p;
  }
  return agent_id_;
}
inline ::bgs::protocol::EntityId* ClearRecentPlayersRequest::mutable_agent_id() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.user_manager.v1.ClearRecentPlayersRequest.agent_id)
  return _internal_mutable_agent_id();
}
inline void ClearRecentPlayersRequest::set_allocated_agent_id(::bgs::protocol::EntityId* agent_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(agent_id_);
  }
  if (agent_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      agent_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, agent_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  agent_id_ = agent_id;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.user_manager.v1.ClearRecentPlayersRequest.agent_id)
}

// optional uint32 program = 2;
inline bool ClearRecentPlayersRequest::_internal_has_program() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ClearRecentPlayersRequest::has_program() const {
  return _internal_has_program();
}
inline void ClearRecentPlayersRequest::clear_program() {
  program_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ClearRecentPlayersRequest::_internal_program() const {
  return program_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ClearRecentPlayersRequest::program() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.user_manager.v1.ClearRecentPlayersRequest.program)
  return _internal_program();
}
inline void ClearRecentPlayersRequest::_internal_set_program(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  program_ = value;
}
inline void ClearRecentPlayersRequest::set_program(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_program(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.user_manager.v1.ClearRecentPlayersRequest.program)
}

// -------------------------------------------------------------------

// BlockPlayerRequest

// optional .bgs.protocol.EntityId agent_id = 1;
inline bool BlockPlayerRequest::_internal_has_agent_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || agent_id_ != nullptr);
  return value;
}
inline bool BlockPlayerRequest::has_agent_id() const {
  return _internal_has_agent_id();
}
inline const ::bgs::protocol::EntityId& BlockPlayerRequest::_internal_agent_id() const {
  const ::bgs::protocol::EntityId* p = agent_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::EntityId*>(
      &::bgs::protocol::_EntityId_default_instance_);
}
inline const ::bgs::protocol::EntityId& BlockPlayerRequest::agent_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.user_manager.v1.BlockPlayerRequest.agent_id)
  return _internal_agent_id();
}
inline ::bgs::protocol::EntityId* BlockPlayerRequest::release_agent_id() {
  // @@protoc_insertion_point(field_release:bgs.protocol.user_manager.v1.BlockPlayerRequest.agent_id)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::EntityId* temp = agent_id_;
  agent_id_ = nullptr;
  return temp;
}
inline ::bgs::protocol::EntityId* BlockPlayerRequest::_internal_mutable_agent_id() {
  _has_bits_[0] |= 0x00000001u;
  if (agent_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::EntityId>(GetArenaNoVirtual());
    agent_id_ = p;
  }
  return agent_id_;
}
inline ::bgs::protocol::EntityId* BlockPlayerRequest::mutable_agent_id() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.user_manager.v1.BlockPlayerRequest.agent_id)
  return _internal_mutable_agent_id();
}
inline void BlockPlayerRequest::set_allocated_agent_id(::bgs::protocol::EntityId* agent_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(agent_id_);
  }
  if (agent_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      agent_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, agent_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  agent_id_ = agent_id;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.user_manager.v1.BlockPlayerRequest.agent_id)
}

// required .bgs.protocol.EntityId target_id = 2;
inline bool BlockPlayerRequest::_internal_has_target_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || target_id_ != nullptr);
  return value;
}
inline bool BlockPlayerRequest::has_target_id() const {
  return _internal_has_target_id();
}
inline const ::bgs::protocol::EntityId& BlockPlayerRequest::_internal_target_id() const {
  const ::bgs::protocol::EntityId* p = target_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::EntityId*>(
      &::bgs::protocol::_EntityId_default_instance_);
}
inline const ::bgs::protocol::EntityId& BlockPlayerRequest::target_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.user_manager.v1.BlockPlayerRequest.target_id)
  return _internal_target_id();
}
inline ::bgs::protocol::EntityId* BlockPlayerRequest::release_target_id() {
  // @@protoc_insertion_point(field_release:bgs.protocol.user_manager.v1.BlockPlayerRequest.target_id)
  _has_bits_[0] &= ~0x00000002u;
  ::bgs::protocol::EntityId* temp = target_id_;
  target_id_ = nullptr;
  return temp;
}
inline ::bgs::protocol::EntityId* BlockPlayerRequest::_internal_mutable_target_id() {
  _has_bits_[0] |= 0x00000002u;
  if (target_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::EntityId>(GetArenaNoVirtual());
    target_id_ = p;
  }
  return target_id_;
}
inline ::bgs::protocol::EntityId* BlockPlayerRequest::mutable_target_id() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.user_manager.v1.BlockPlayerRequest.target_id)
  return _internal_mutable_target_id();
}
inline void BlockPlayerRequest::set_allocated_target_id(::bgs::protocol::EntityId* target_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(target_id_);
  }
  if (target_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      target_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, target_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  target_id_ = target_id;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.user_manager.v1.BlockPlayerRequest.target_id)
}

// optional uint32 role = 3;
inline bool BlockPlayerRequest::_internal_has_role() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool BlockPlayerRequest::has_role() const {
  return _internal_has_role();
}
inline void BlockPlayerRequest::clear_role() {
  role_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BlockPlayerRequest::_internal_role() const {
  return role_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BlockPlayerRequest::role() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.user_manager.v1.BlockPlayerRequest.role)
  return _internal_role();
}
inline void BlockPlayerRequest::_internal_set_role(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  role_ = value;
}
inline void BlockPlayerRequest::set_role(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_role(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.user_manager.v1.BlockPlayerRequest.role)
}

// -------------------------------------------------------------------

// UnblockPlayerRequest

// optional .bgs.protocol.EntityId agent_id = 1;
inline bool UnblockPlayerRequest::_internal_has_agent_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || agent_id_ != nullptr);
  return value;
}
inline bool UnblockPlayerRequest::has_agent_id() const {
  return _internal_has_agent_id();
}
inline const ::bgs::protocol::EntityId& UnblockPlayerRequest::_internal_agent_id() const {
  const ::bgs::protocol::EntityId* p = agent_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::EntityId*>(
      &::bgs::protocol::_EntityId_default_instance_);
}
inline const ::bgs::protocol::EntityId& UnblockPlayerRequest::agent_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.user_manager.v1.UnblockPlayerRequest.agent_id)
  return _internal_agent_id();
}
inline ::bgs::protocol::EntityId* UnblockPlayerRequest::release_agent_id() {
  // @@protoc_insertion_point(field_release:bgs.protocol.user_manager.v1.UnblockPlayerRequest.agent_id)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::EntityId* temp = agent_id_;
  agent_id_ = nullptr;
  return temp;
}
inline ::bgs::protocol::EntityId* UnblockPlayerRequest::_internal_mutable_agent_id() {
  _has_bits_[0] |= 0x00000001u;
  if (agent_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::EntityId>(GetArenaNoVirtual());
    agent_id_ = p;
  }
  return agent_id_;
}
inline ::bgs::protocol::EntityId* UnblockPlayerRequest::mutable_agent_id() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.user_manager.v1.UnblockPlayerRequest.agent_id)
  return _internal_mutable_agent_id();
}
inline void UnblockPlayerRequest::set_allocated_agent_id(::bgs::protocol::EntityId* agent_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(agent_id_);
  }
  if (agent_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      agent_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, agent_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  agent_id_ = agent_id;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.user_manager.v1.UnblockPlayerRequest.agent_id)
}

// required .bgs.protocol.EntityId target_id = 2;
inline bool UnblockPlayerRequest::_internal_has_target_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || target_id_ != nullptr);
  return value;
}
inline bool UnblockPlayerRequest::has_target_id() const {
  return _internal_has_target_id();
}
inline const ::bgs::protocol::EntityId& UnblockPlayerRequest::_internal_target_id() const {
  const ::bgs::protocol::EntityId* p = target_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::EntityId*>(
      &::bgs::protocol::_EntityId_default_instance_);
}
inline const ::bgs::protocol::EntityId& UnblockPlayerRequest::target_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.user_manager.v1.UnblockPlayerRequest.target_id)
  return _internal_target_id();
}
inline ::bgs::protocol::EntityId* UnblockPlayerRequest::release_target_id() {
  // @@protoc_insertion_point(field_release:bgs.protocol.user_manager.v1.UnblockPlayerRequest.target_id)
  _has_bits_[0] &= ~0x00000002u;
  ::bgs::protocol::EntityId* temp = target_id_;
  target_id_ = nullptr;
  return temp;
}
inline ::bgs::protocol::EntityId* UnblockPlayerRequest::_internal_mutable_target_id() {
  _has_bits_[0] |= 0x00000002u;
  if (target_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::EntityId>(GetArenaNoVirtual());
    target_id_ = p;
  }
  return target_id_;
}
inline ::bgs::protocol::EntityId* UnblockPlayerRequest::mutable_target_id() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.user_manager.v1.UnblockPlayerRequest.target_id)
  return _internal_mutable_target_id();
}
inline void UnblockPlayerRequest::set_allocated_target_id(::bgs::protocol::EntityId* target_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(target_id_);
  }
  if (target_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      target_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, target_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  target_id_ = target_id;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.user_manager.v1.UnblockPlayerRequest.target_id)
}

// -------------------------------------------------------------------

// BlockedPlayerAddedNotification

// required .bgs.protocol.user_manager.v1.BlockedPlayer player = 1;
inline bool BlockedPlayerAddedNotification::_internal_has_player() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || player_ != nullptr);
  return value;
}
inline bool BlockedPlayerAddedNotification::has_player() const {
  return _internal_has_player();
}
inline const ::bgs::protocol::user_manager::v1::BlockedPlayer& BlockedPlayerAddedNotification::_internal_player() const {
  const ::bgs::protocol::user_manager::v1::BlockedPlayer* p = player_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::user_manager::v1::BlockedPlayer*>(
      &::bgs::protocol::user_manager::v1::_BlockedPlayer_default_instance_);
}
inline const ::bgs::protocol::user_manager::v1::BlockedPlayer& BlockedPlayerAddedNotification::player() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.user_manager.v1.BlockedPlayerAddedNotification.player)
  return _internal_player();
}
inline ::bgs::protocol::user_manager::v1::BlockedPlayer* BlockedPlayerAddedNotification::release_player() {
  // @@protoc_insertion_point(field_release:bgs.protocol.user_manager.v1.BlockedPlayerAddedNotification.player)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::user_manager::v1::BlockedPlayer* temp = player_;
  player_ = nullptr;
  return temp;
}
inline ::bgs::protocol::user_manager::v1::BlockedPlayer* BlockedPlayerAddedNotification::_internal_mutable_player() {
  _has_bits_[0] |= 0x00000001u;
  if (player_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::user_manager::v1::BlockedPlayer>(GetArenaNoVirtual());
    player_ = p;
  }
  return player_;
}
inline ::bgs::protocol::user_manager::v1::BlockedPlayer* BlockedPlayerAddedNotification::mutable_player() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.user_manager.v1.BlockedPlayerAddedNotification.player)
  return _internal_mutable_player();
}
inline void BlockedPlayerAddedNotification::set_allocated_player(::bgs::protocol::user_manager::v1::BlockedPlayer* player) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_);
  }
  if (player) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      player = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  player_ = player;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.user_manager.v1.BlockedPlayerAddedNotification.player)
}

// optional .bgs.protocol.EntityId game_account_id = 2;
inline bool BlockedPlayerAddedNotification::_internal_has_game_account_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || game_account_id_ != nullptr);
  return value;
}
inline bool BlockedPlayerAddedNotification::has_game_account_id() const {
  return _internal_has_game_account_id();
}
inline const ::bgs::protocol::EntityId& BlockedPlayerAddedNotification::_internal_game_account_id() const {
  const ::bgs::protocol::EntityId* p = game_account_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::EntityId*>(
      &::bgs::protocol::_EntityId_default_instance_);
}
inline const ::bgs::protocol::EntityId& BlockedPlayerAddedNotification::game_account_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.user_manager.v1.BlockedPlayerAddedNotification.game_account_id)
  return _internal_game_account_id();
}
inline ::bgs::protocol::EntityId* BlockedPlayerAddedNotification::release_game_account_id() {
  // @@protoc_insertion_point(field_release:bgs.protocol.user_manager.v1.BlockedPlayerAddedNotification.game_account_id)
  _has_bits_[0] &= ~0x00000002u;
  ::bgs::protocol::EntityId* temp = game_account_id_;
  game_account_id_ = nullptr;
  return temp;
}
inline ::bgs::protocol::EntityId* BlockedPlayerAddedNotification::_internal_mutable_game_account_id() {
  _has_bits_[0] |= 0x00000002u;
  if (game_account_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::EntityId>(GetArenaNoVirtual());
    game_account_id_ = p;
  }
  return game_account_id_;
}
inline ::bgs::protocol::EntityId* BlockedPlayerAddedNotification::mutable_game_account_id() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.user_manager.v1.BlockedPlayerAddedNotification.game_account_id)
  return _internal_mutable_game_account_id();
}
inline void BlockedPlayerAddedNotification::set_allocated_game_account_id(::bgs::protocol::EntityId* game_account_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(game_account_id_);
  }
  if (game_account_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      game_account_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, game_account_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  game_account_id_ = game_account_id;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.user_manager.v1.BlockedPlayerAddedNotification.game_account_id)
}

// optional .bgs.protocol.EntityId account_id = 3;
inline bool BlockedPlayerAddedNotification::_internal_has_account_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || account_id_ != nullptr);
  return value;
}
inline bool BlockedPlayerAddedNotification::has_account_id() const {
  return _internal_has_account_id();
}
inline const ::bgs::protocol::EntityId& BlockedPlayerAddedNotification::_internal_account_id() const {
  const ::bgs::protocol::EntityId* p = account_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::EntityId*>(
      &::bgs::protocol::_EntityId_default_instance_);
}
inline const ::bgs::protocol::EntityId& BlockedPlayerAddedNotification::account_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.user_manager.v1.BlockedPlayerAddedNotification.account_id)
  return _internal_account_id();
}
inline ::bgs::protocol::EntityId* BlockedPlayerAddedNotification::release_account_id() {
  // @@protoc_insertion_point(field_release:bgs.protocol.user_manager.v1.BlockedPlayerAddedNotification.account_id)
  _has_bits_[0] &= ~0x00000004u;
  ::bgs::protocol::EntityId* temp = account_id_;
  account_id_ = nullptr;
  return temp;
}
inline ::bgs::protocol::EntityId* BlockedPlayerAddedNotification::_internal_mutable_account_id() {
  _has_bits_[0] |= 0x00000004u;
  if (account_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::EntityId>(GetArenaNoVirtual());
    account_id_ = p;
  }
  return account_id_;
}
inline ::bgs::protocol::EntityId* BlockedPlayerAddedNotification::mutable_account_id() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.user_manager.v1.BlockedPlayerAddedNotification.account_id)
  return _internal_mutable_account_id();
}
inline void BlockedPlayerAddedNotification::set_allocated_account_id(::bgs::protocol::EntityId* account_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(account_id_);
  }
  if (account_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      account_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, account_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  account_id_ = account_id;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.user_manager.v1.BlockedPlayerAddedNotification.account_id)
}

// -------------------------------------------------------------------

// BlockedPlayerRemovedNotification

// required .bgs.protocol.user_manager.v1.BlockedPlayer player = 1;
inline bool BlockedPlayerRemovedNotification::_internal_has_player() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || player_ != nullptr);
  return value;
}
inline bool BlockedPlayerRemovedNotification::has_player() const {
  return _internal_has_player();
}
inline const ::bgs::protocol::user_manager::v1::BlockedPlayer& BlockedPlayerRemovedNotification::_internal_player() const {
  const ::bgs::protocol::user_manager::v1::BlockedPlayer* p = player_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::user_manager::v1::BlockedPlayer*>(
      &::bgs::protocol::user_manager::v1::_BlockedPlayer_default_instance_);
}
inline const ::bgs::protocol::user_manager::v1::BlockedPlayer& BlockedPlayerRemovedNotification::player() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.user_manager.v1.BlockedPlayerRemovedNotification.player)
  return _internal_player();
}
inline ::bgs::protocol::user_manager::v1::BlockedPlayer* BlockedPlayerRemovedNotification::release_player() {
  // @@protoc_insertion_point(field_release:bgs.protocol.user_manager.v1.BlockedPlayerRemovedNotification.player)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::user_manager::v1::BlockedPlayer* temp = player_;
  player_ = nullptr;
  return temp;
}
inline ::bgs::protocol::user_manager::v1::BlockedPlayer* BlockedPlayerRemovedNotification::_internal_mutable_player() {
  _has_bits_[0] |= 0x00000001u;
  if (player_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::user_manager::v1::BlockedPlayer>(GetArenaNoVirtual());
    player_ = p;
  }
  return player_;
}
inline ::bgs::protocol::user_manager::v1::BlockedPlayer* BlockedPlayerRemovedNotification::mutable_player() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.user_manager.v1.BlockedPlayerRemovedNotification.player)
  return _internal_mutable_player();
}
inline void BlockedPlayerRemovedNotification::set_allocated_player(::bgs::protocol::user_manager::v1::BlockedPlayer* player) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_);
  }
  if (player) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      player = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  player_ = player;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.user_manager.v1.BlockedPlayerRemovedNotification.player)
}

// optional .bgs.protocol.EntityId game_account_id = 2;
inline bool BlockedPlayerRemovedNotification::_internal_has_game_account_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || game_account_id_ != nullptr);
  return value;
}
inline bool BlockedPlayerRemovedNotification::has_game_account_id() const {
  return _internal_has_game_account_id();
}
inline const ::bgs::protocol::EntityId& BlockedPlayerRemovedNotification::_internal_game_account_id() const {
  const ::bgs::protocol::EntityId* p = game_account_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::EntityId*>(
      &::bgs::protocol::_EntityId_default_instance_);
}
inline const ::bgs::protocol::EntityId& BlockedPlayerRemovedNotification::game_account_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.user_manager.v1.BlockedPlayerRemovedNotification.game_account_id)
  return _internal_game_account_id();
}
inline ::bgs::protocol::EntityId* BlockedPlayerRemovedNotification::release_game_account_id() {
  // @@protoc_insertion_point(field_release:bgs.protocol.user_manager.v1.BlockedPlayerRemovedNotification.game_account_id)
  _has_bits_[0] &= ~0x00000002u;
  ::bgs::protocol::EntityId* temp = game_account_id_;
  game_account_id_ = nullptr;
  return temp;
}
inline ::bgs::protocol::EntityId* BlockedPlayerRemovedNotification::_internal_mutable_game_account_id() {
  _has_bits_[0] |= 0x00000002u;
  if (game_account_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::EntityId>(GetArenaNoVirtual());
    game_account_id_ = p;
  }
  return game_account_id_;
}
inline ::bgs::protocol::EntityId* BlockedPlayerRemovedNotification::mutable_game_account_id() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.user_manager.v1.BlockedPlayerRemovedNotification.game_account_id)
  return _internal_mutable_game_account_id();
}
inline void BlockedPlayerRemovedNotification::set_allocated_game_account_id(::bgs::protocol::EntityId* game_account_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(game_account_id_);
  }
  if (game_account_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      game_account_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, game_account_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  game_account_id_ = game_account_id;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.user_manager.v1.BlockedPlayerRemovedNotification.game_account_id)
}

// optional .bgs.protocol.EntityId account_id = 3;
inline bool BlockedPlayerRemovedNotification::_internal_has_account_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || account_id_ != nullptr);
  return value;
}
inline bool BlockedPlayerRemovedNotification::has_account_id() const {
  return _internal_has_account_id();
}
inline const ::bgs::protocol::EntityId& BlockedPlayerRemovedNotification::_internal_account_id() const {
  const ::bgs::protocol::EntityId* p = account_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::EntityId*>(
      &::bgs::protocol::_EntityId_default_instance_);
}
inline const ::bgs::protocol::EntityId& BlockedPlayerRemovedNotification::account_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.user_manager.v1.BlockedPlayerRemovedNotification.account_id)
  return _internal_account_id();
}
inline ::bgs::protocol::EntityId* BlockedPlayerRemovedNotification::release_account_id() {
  // @@protoc_insertion_point(field_release:bgs.protocol.user_manager.v1.BlockedPlayerRemovedNotification.account_id)
  _has_bits_[0] &= ~0x00000004u;
  ::bgs::protocol::EntityId* temp = account_id_;
  account_id_ = nullptr;
  return temp;
}
inline ::bgs::protocol::EntityId* BlockedPlayerRemovedNotification::_internal_mutable_account_id() {
  _has_bits_[0] |= 0x00000004u;
  if (account_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::EntityId>(GetArenaNoVirtual());
    account_id_ = p;
  }
  return account_id_;
}
inline ::bgs::protocol::EntityId* BlockedPlayerRemovedNotification::mutable_account_id() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.user_manager.v1.BlockedPlayerRemovedNotification.account_id)
  return _internal_mutable_account_id();
}
inline void BlockedPlayerRemovedNotification::set_allocated_account_id(::bgs::protocol::EntityId* account_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(account_id_);
  }
  if (account_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      account_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, account_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  account_id_ = account_id;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.user_manager.v1.BlockedPlayerRemovedNotification.account_id)
}

// -------------------------------------------------------------------

// RecentPlayersAddedNotification

// repeated .bgs.protocol.user_manager.v1.RecentPlayer player = 1;
inline int RecentPlayersAddedNotification::_internal_player_size() const {
  return player_.size();
}
inline int RecentPlayersAddedNotification::player_size() const {
  return _internal_player_size();
}
inline ::bgs::protocol::user_manager::v1::RecentPlayer* RecentPlayersAddedNotification::mutable_player(int index) {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.user_manager.v1.RecentPlayersAddedNotification.player)
  return player_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::user_manager::v1::RecentPlayer >*
RecentPlayersAddedNotification::mutable_player() {
  // @@protoc_insertion_point(field_mutable_list:bgs.protocol.user_manager.v1.RecentPlayersAddedNotification.player)
  return &player_;
}
inline const ::bgs::protocol::user_manager::v1::RecentPlayer& RecentPlayersAddedNotification::_internal_player(int index) const {
  return player_.Get(index);
}
inline const ::bgs::protocol::user_manager::v1::RecentPlayer& RecentPlayersAddedNotification::player(int index) const {
  // @@protoc_insertion_point(field_get:bgs.protocol.user_manager.v1.RecentPlayersAddedNotification.player)
  return _internal_player(index);
}
inline ::bgs::protocol::user_manager::v1::RecentPlayer* RecentPlayersAddedNotification::_internal_add_player() {
  return player_.Add();
}
inline ::bgs::protocol::user_manager::v1::RecentPlayer* RecentPlayersAddedNotification::add_player() {
  // @@protoc_insertion_point(field_add:bgs.protocol.user_manager.v1.RecentPlayersAddedNotification.player)
  return _internal_add_player();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::user_manager::v1::RecentPlayer >&
RecentPlayersAddedNotification::player() const {
  // @@protoc_insertion_point(field_list:bgs.protocol.user_manager.v1.RecentPlayersAddedNotification.player)
  return player_;
}

// -------------------------------------------------------------------

// RecentPlayersRemovedNotification

// repeated .bgs.protocol.user_manager.v1.RecentPlayer player = 1;
inline int RecentPlayersRemovedNotification::_internal_player_size() const {
  return player_.size();
}
inline int RecentPlayersRemovedNotification::player_size() const {
  return _internal_player_size();
}
inline ::bgs::protocol::user_manager::v1::RecentPlayer* RecentPlayersRemovedNotification::mutable_player(int index) {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.user_manager.v1.RecentPlayersRemovedNotification.player)
  return player_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::user_manager::v1::RecentPlayer >*
RecentPlayersRemovedNotification::mutable_player() {
  // @@protoc_insertion_point(field_mutable_list:bgs.protocol.user_manager.v1.RecentPlayersRemovedNotification.player)
  return &player_;
}
inline const ::bgs::protocol::user_manager::v1::RecentPlayer& RecentPlayersRemovedNotification::_internal_player(int index) const {
  return player_.Get(index);
}
inline const ::bgs::protocol::user_manager::v1::RecentPlayer& RecentPlayersRemovedNotification::player(int index) const {
  // @@protoc_insertion_point(field_get:bgs.protocol.user_manager.v1.RecentPlayersRemovedNotification.player)
  return _internal_player(index);
}
inline ::bgs::protocol::user_manager::v1::RecentPlayer* RecentPlayersRemovedNotification::_internal_add_player() {
  return player_.Add();
}
inline ::bgs::protocol::user_manager::v1::RecentPlayer* RecentPlayersRemovedNotification::add_player() {
  // @@protoc_insertion_point(field_add:bgs.protocol.user_manager.v1.RecentPlayersRemovedNotification.player)
  return _internal_add_player();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::user_manager::v1::RecentPlayer >&
RecentPlayersRemovedNotification::player() const {
  // @@protoc_insertion_point(field_list:bgs.protocol.user_manager.v1.RecentPlayersRemovedNotification.player)
  return player_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace user_manager
}  // namespace protocol
}  // namespace bgs

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_bgs_2flow_2fpb_2fclient_2fuser_5fmanager_5fservice_2eproto
