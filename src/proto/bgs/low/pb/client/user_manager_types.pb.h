// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bgs/low/pb/client/user_manager_types.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_bgs_2flow_2fpb_2fclient_2fuser_5fmanager_5ftypes_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_bgs_2flow_2fpb_2fclient_2fuser_5fmanager_5ftypes_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "bgs/low/pb/client/entity_types.pb.h"
#include "bgs/low/pb/client/attribute_types.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2fuser_5fmanager_5ftypes_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_bgs_2flow_2fpb_2fclient_2fuser_5fmanager_5ftypes_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bgs_2flow_2fpb_2fclient_2fuser_5fmanager_5ftypes_2eproto;
namespace bgs {
namespace protocol {
namespace user_manager {
namespace v1 {
class BlockedPlayer;
class BlockedPlayerDefaultTypeInternal;
extern BlockedPlayerDefaultTypeInternal _BlockedPlayer_default_instance_;
class RecentPlayer;
class RecentPlayerDefaultTypeInternal;
extern RecentPlayerDefaultTypeInternal _RecentPlayer_default_instance_;
}  // namespace v1
}  // namespace user_manager
}  // namespace protocol
}  // namespace bgs
PROTOBUF_NAMESPACE_OPEN
template<> ::bgs::protocol::user_manager::v1::BlockedPlayer* Arena::CreateMaybeMessage<::bgs::protocol::user_manager::v1::BlockedPlayer>(Arena*);
template<> ::bgs::protocol::user_manager::v1::RecentPlayer* Arena::CreateMaybeMessage<::bgs::protocol::user_manager::v1::RecentPlayer>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace bgs {
namespace protocol {
namespace user_manager {
namespace v1 {

// ===================================================================

class RecentPlayer :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.user_manager.v1.RecentPlayer) */ {
 public:
  RecentPlayer();
  virtual ~RecentPlayer();

  RecentPlayer(const RecentPlayer& from);
  RecentPlayer(RecentPlayer&& from) noexcept
    : RecentPlayer() {
    *this = ::std::move(from);
  }

  inline RecentPlayer& operator=(const RecentPlayer& from) {
    CopyFrom(from);
    return *this;
  }
  inline RecentPlayer& operator=(RecentPlayer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RecentPlayer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RecentPlayer* internal_default_instance() {
    return reinterpret_cast<const RecentPlayer*>(
               &_RecentPlayer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RecentPlayer& a, RecentPlayer& b) {
    a.Swap(&b);
  }
  inline void Swap(RecentPlayer* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RecentPlayer* New() const final {
    return CreateMaybeMessage<RecentPlayer>(nullptr);
  }

  RecentPlayer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RecentPlayer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RecentPlayer& from);
  void MergeFrom(const RecentPlayer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecentPlayer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.user_manager.v1.RecentPlayer";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fuser_5fmanager_5ftypes_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fuser_5fmanager_5ftypes_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttributesFieldNumber = 4,
    kProgramFieldNumber = 2,
    kEntityIdFieldNumber = 1,
    kTimestampPlayedFieldNumber = 3,
    kIdFieldNumber = 5,
    kCounterFieldNumber = 6,
  };
  // repeated .bgs.protocol.Attribute attributes = 4;
  int attributes_size() const;
  private:
  int _internal_attributes_size() const;
  public:
  void clear_attributes();
  ::bgs::protocol::Attribute* mutable_attributes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::Attribute >*
      mutable_attributes();
  private:
  const ::bgs::protocol::Attribute& _internal_attributes(int index) const;
  ::bgs::protocol::Attribute* _internal_add_attributes();
  public:
  const ::bgs::protocol::Attribute& attributes(int index) const;
  ::bgs::protocol::Attribute* add_attributes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::Attribute >&
      attributes() const;

  // optional string program = 2;
  bool has_program() const;
  private:
  bool _internal_has_program() const;
  public:
  void clear_program();
  const std::string& program() const;
  void set_program(const std::string& value);
  void set_program(std::string&& value);
  void set_program(const char* value);
  void set_program(const char* value, size_t size);
  std::string* mutable_program();
  std::string* release_program();
  void set_allocated_program(std::string* program);
  private:
  const std::string& _internal_program() const;
  void _internal_set_program(const std::string& value);
  std::string* _internal_mutable_program();
  public:

  // required .bgs.protocol.EntityId entity_id = 1;
  bool has_entity_id() const;
  private:
  bool _internal_has_entity_id() const;
  public:
  void clear_entity_id();
  const ::bgs::protocol::EntityId& entity_id() const;
  ::bgs::protocol::EntityId* release_entity_id();
  ::bgs::protocol::EntityId* mutable_entity_id();
  void set_allocated_entity_id(::bgs::protocol::EntityId* entity_id);
  private:
  const ::bgs::protocol::EntityId& _internal_entity_id() const;
  ::bgs::protocol::EntityId* _internal_mutable_entity_id();
  public:

  // optional fixed64 timestamp_played = 3;
  bool has_timestamp_played() const;
  private:
  bool _internal_has_timestamp_played() const;
  public:
  void clear_timestamp_played();
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp_played() const;
  void set_timestamp_played(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_timestamp_played() const;
  void _internal_set_timestamp_played(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional fixed32 id = 5 [default = 0];
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional fixed32 counter = 6 [default = 0];
  bool has_counter() const;
  private:
  bool _internal_has_counter() const;
  public:
  void clear_counter();
  ::PROTOBUF_NAMESPACE_ID::uint32 counter() const;
  void set_counter(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_counter() const;
  void _internal_set_counter(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.user_manager.v1.RecentPlayer)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::Attribute > attributes_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr program_;
  ::bgs::protocol::EntityId* entity_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp_played_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 counter_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fuser_5fmanager_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class BlockedPlayer :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.user_manager.v1.BlockedPlayer) */ {
 public:
  BlockedPlayer();
  virtual ~BlockedPlayer();

  BlockedPlayer(const BlockedPlayer& from);
  BlockedPlayer(BlockedPlayer&& from) noexcept
    : BlockedPlayer() {
    *this = ::std::move(from);
  }

  inline BlockedPlayer& operator=(const BlockedPlayer& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlockedPlayer& operator=(BlockedPlayer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BlockedPlayer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BlockedPlayer* internal_default_instance() {
    return reinterpret_cast<const BlockedPlayer*>(
               &_BlockedPlayer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(BlockedPlayer& a, BlockedPlayer& b) {
    a.Swap(&b);
  }
  inline void Swap(BlockedPlayer* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BlockedPlayer* New() const final {
    return CreateMaybeMessage<BlockedPlayer>(nullptr);
  }

  BlockedPlayer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BlockedPlayer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BlockedPlayer& from);
  void MergeFrom(const BlockedPlayer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BlockedPlayer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.user_manager.v1.BlockedPlayer";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fuser_5fmanager_5ftypes_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fuser_5fmanager_5ftypes_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoleFieldNumber = 3,
    kNameFieldNumber = 2,
    kAccountIdFieldNumber = 1,
    kPrivilegesFieldNumber = 4,
  };
  // repeated uint32 role = 3 [packed = true];
  int role_size() const;
  private:
  int _internal_role_size() const;
  public:
  void clear_role();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_role(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_role() const;
  void _internal_add_role(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_role();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 role(int index) const;
  void set_role(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_role(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      role() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_role();

  // optional string name = 2;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // required .bgs.protocol.EntityId account_id = 1;
  bool has_account_id() const;
  private:
  bool _internal_has_account_id() const;
  public:
  void clear_account_id();
  const ::bgs::protocol::EntityId& account_id() const;
  ::bgs::protocol::EntityId* release_account_id();
  ::bgs::protocol::EntityId* mutable_account_id();
  void set_allocated_account_id(::bgs::protocol::EntityId* account_id);
  private:
  const ::bgs::protocol::EntityId& _internal_account_id() const;
  ::bgs::protocol::EntityId* _internal_mutable_account_id();
  public:

  // optional uint64 privileges = 4 [default = 0];
  bool has_privileges() const;
  private:
  bool _internal_has_privileges() const;
  public:
  void clear_privileges();
  ::PROTOBUF_NAMESPACE_ID::uint64 privileges() const;
  void set_privileges(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_privileges() const;
  void _internal_set_privileges(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.user_manager.v1.BlockedPlayer)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > role_;
  mutable std::atomic<int> _role_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::bgs::protocol::EntityId* account_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 privileges_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fuser_5fmanager_5ftypes_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RecentPlayer

// required .bgs.protocol.EntityId entity_id = 1;
inline bool RecentPlayer::_internal_has_entity_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || entity_id_ != nullptr);
  return value;
}
inline bool RecentPlayer::has_entity_id() const {
  return _internal_has_entity_id();
}
inline const ::bgs::protocol::EntityId& RecentPlayer::_internal_entity_id() const {
  const ::bgs::protocol::EntityId* p = entity_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::EntityId*>(
      &::bgs::protocol::_EntityId_default_instance_);
}
inline const ::bgs::protocol::EntityId& RecentPlayer::entity_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.user_manager.v1.RecentPlayer.entity_id)
  return _internal_entity_id();
}
inline ::bgs::protocol::EntityId* RecentPlayer::release_entity_id() {
  // @@protoc_insertion_point(field_release:bgs.protocol.user_manager.v1.RecentPlayer.entity_id)
  _has_bits_[0] &= ~0x00000002u;
  ::bgs::protocol::EntityId* temp = entity_id_;
  entity_id_ = nullptr;
  return temp;
}
inline ::bgs::protocol::EntityId* RecentPlayer::_internal_mutable_entity_id() {
  _has_bits_[0] |= 0x00000002u;
  if (entity_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::EntityId>(GetArenaNoVirtual());
    entity_id_ = p;
  }
  return entity_id_;
}
inline ::bgs::protocol::EntityId* RecentPlayer::mutable_entity_id() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.user_manager.v1.RecentPlayer.entity_id)
  return _internal_mutable_entity_id();
}
inline void RecentPlayer::set_allocated_entity_id(::bgs::protocol::EntityId* entity_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(entity_id_);
  }
  if (entity_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      entity_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, entity_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  entity_id_ = entity_id;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.user_manager.v1.RecentPlayer.entity_id)
}

// optional string program = 2;
inline bool RecentPlayer::_internal_has_program() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RecentPlayer::has_program() const {
  return _internal_has_program();
}
inline void RecentPlayer::clear_program() {
  program_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RecentPlayer::program() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.user_manager.v1.RecentPlayer.program)
  return _internal_program();
}
inline void RecentPlayer::set_program(const std::string& value) {
  _internal_set_program(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.user_manager.v1.RecentPlayer.program)
}
inline std::string* RecentPlayer::mutable_program() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.user_manager.v1.RecentPlayer.program)
  return _internal_mutable_program();
}
inline const std::string& RecentPlayer::_internal_program() const {
  return program_.GetNoArena();
}
inline void RecentPlayer::_internal_set_program(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  program_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RecentPlayer::set_program(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  program_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bgs.protocol.user_manager.v1.RecentPlayer.program)
}
inline void RecentPlayer::set_program(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  program_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bgs.protocol.user_manager.v1.RecentPlayer.program)
}
inline void RecentPlayer::set_program(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  program_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bgs.protocol.user_manager.v1.RecentPlayer.program)
}
inline std::string* RecentPlayer::_internal_mutable_program() {
  _has_bits_[0] |= 0x00000001u;
  return program_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RecentPlayer::release_program() {
  // @@protoc_insertion_point(field_release:bgs.protocol.user_manager.v1.RecentPlayer.program)
  if (!_internal_has_program()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return program_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RecentPlayer::set_allocated_program(std::string* program) {
  if (program != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  program_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), program);
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.user_manager.v1.RecentPlayer.program)
}

// optional fixed64 timestamp_played = 3;
inline bool RecentPlayer::_internal_has_timestamp_played() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool RecentPlayer::has_timestamp_played() const {
  return _internal_has_timestamp_played();
}
inline void RecentPlayer::clear_timestamp_played() {
  timestamp_played_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RecentPlayer::_internal_timestamp_played() const {
  return timestamp_played_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RecentPlayer::timestamp_played() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.user_manager.v1.RecentPlayer.timestamp_played)
  return _internal_timestamp_played();
}
inline void RecentPlayer::_internal_set_timestamp_played(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  timestamp_played_ = value;
}
inline void RecentPlayer::set_timestamp_played(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_timestamp_played(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.user_manager.v1.RecentPlayer.timestamp_played)
}

// repeated .bgs.protocol.Attribute attributes = 4;
inline int RecentPlayer::_internal_attributes_size() const {
  return attributes_.size();
}
inline int RecentPlayer::attributes_size() const {
  return _internal_attributes_size();
}
inline ::bgs::protocol::Attribute* RecentPlayer::mutable_attributes(int index) {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.user_manager.v1.RecentPlayer.attributes)
  return attributes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::Attribute >*
RecentPlayer::mutable_attributes() {
  // @@protoc_insertion_point(field_mutable_list:bgs.protocol.user_manager.v1.RecentPlayer.attributes)
  return &attributes_;
}
inline const ::bgs::protocol::Attribute& RecentPlayer::_internal_attributes(int index) const {
  return attributes_.Get(index);
}
inline const ::bgs::protocol::Attribute& RecentPlayer::attributes(int index) const {
  // @@protoc_insertion_point(field_get:bgs.protocol.user_manager.v1.RecentPlayer.attributes)
  return _internal_attributes(index);
}
inline ::bgs::protocol::Attribute* RecentPlayer::_internal_add_attributes() {
  return attributes_.Add();
}
inline ::bgs::protocol::Attribute* RecentPlayer::add_attributes() {
  // @@protoc_insertion_point(field_add:bgs.protocol.user_manager.v1.RecentPlayer.attributes)
  return _internal_add_attributes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::Attribute >&
RecentPlayer::attributes() const {
  // @@protoc_insertion_point(field_list:bgs.protocol.user_manager.v1.RecentPlayer.attributes)
  return attributes_;
}

// optional fixed32 id = 5 [default = 0];
inline bool RecentPlayer::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool RecentPlayer::has_id() const {
  return _internal_has_id();
}
inline void RecentPlayer::clear_id() {
  id_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RecentPlayer::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RecentPlayer::id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.user_manager.v1.RecentPlayer.id)
  return _internal_id();
}
inline void RecentPlayer::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  id_ = value;
}
inline void RecentPlayer::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.user_manager.v1.RecentPlayer.id)
}

// optional fixed32 counter = 6 [default = 0];
inline bool RecentPlayer::_internal_has_counter() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool RecentPlayer::has_counter() const {
  return _internal_has_counter();
}
inline void RecentPlayer::clear_counter() {
  counter_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RecentPlayer::_internal_counter() const {
  return counter_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RecentPlayer::counter() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.user_manager.v1.RecentPlayer.counter)
  return _internal_counter();
}
inline void RecentPlayer::_internal_set_counter(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  counter_ = value;
}
inline void RecentPlayer::set_counter(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_counter(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.user_manager.v1.RecentPlayer.counter)
}

// -------------------------------------------------------------------

// BlockedPlayer

// required .bgs.protocol.EntityId account_id = 1;
inline bool BlockedPlayer::_internal_has_account_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || account_id_ != nullptr);
  return value;
}
inline bool BlockedPlayer::has_account_id() const {
  return _internal_has_account_id();
}
inline const ::bgs::protocol::EntityId& BlockedPlayer::_internal_account_id() const {
  const ::bgs::protocol::EntityId* p = account_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::EntityId*>(
      &::bgs::protocol::_EntityId_default_instance_);
}
inline const ::bgs::protocol::EntityId& BlockedPlayer::account_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.user_manager.v1.BlockedPlayer.account_id)
  return _internal_account_id();
}
inline ::bgs::protocol::EntityId* BlockedPlayer::release_account_id() {
  // @@protoc_insertion_point(field_release:bgs.protocol.user_manager.v1.BlockedPlayer.account_id)
  _has_bits_[0] &= ~0x00000002u;
  ::bgs::protocol::EntityId* temp = account_id_;
  account_id_ = nullptr;
  return temp;
}
inline ::bgs::protocol::EntityId* BlockedPlayer::_internal_mutable_account_id() {
  _has_bits_[0] |= 0x00000002u;
  if (account_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::EntityId>(GetArenaNoVirtual());
    account_id_ = p;
  }
  return account_id_;
}
inline ::bgs::protocol::EntityId* BlockedPlayer::mutable_account_id() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.user_manager.v1.BlockedPlayer.account_id)
  return _internal_mutable_account_id();
}
inline void BlockedPlayer::set_allocated_account_id(::bgs::protocol::EntityId* account_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(account_id_);
  }
  if (account_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      account_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, account_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  account_id_ = account_id;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.user_manager.v1.BlockedPlayer.account_id)
}

// optional string name = 2;
inline bool BlockedPlayer::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool BlockedPlayer::has_name() const {
  return _internal_has_name();
}
inline void BlockedPlayer::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& BlockedPlayer::name() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.user_manager.v1.BlockedPlayer.name)
  return _internal_name();
}
inline void BlockedPlayer::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.user_manager.v1.BlockedPlayer.name)
}
inline std::string* BlockedPlayer::mutable_name() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.user_manager.v1.BlockedPlayer.name)
  return _internal_mutable_name();
}
inline const std::string& BlockedPlayer::_internal_name() const {
  return name_.GetNoArena();
}
inline void BlockedPlayer::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void BlockedPlayer::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bgs.protocol.user_manager.v1.BlockedPlayer.name)
}
inline void BlockedPlayer::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bgs.protocol.user_manager.v1.BlockedPlayer.name)
}
inline void BlockedPlayer::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bgs.protocol.user_manager.v1.BlockedPlayer.name)
}
inline std::string* BlockedPlayer::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BlockedPlayer::release_name() {
  // @@protoc_insertion_point(field_release:bgs.protocol.user_manager.v1.BlockedPlayer.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BlockedPlayer::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.user_manager.v1.BlockedPlayer.name)
}

// repeated uint32 role = 3 [packed = true];
inline int BlockedPlayer::_internal_role_size() const {
  return role_.size();
}
inline int BlockedPlayer::role_size() const {
  return _internal_role_size();
}
inline void BlockedPlayer::clear_role() {
  role_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BlockedPlayer::_internal_role(int index) const {
  return role_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BlockedPlayer::role(int index) const {
  // @@protoc_insertion_point(field_get:bgs.protocol.user_manager.v1.BlockedPlayer.role)
  return _internal_role(index);
}
inline void BlockedPlayer::set_role(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  role_.Set(index, value);
  // @@protoc_insertion_point(field_set:bgs.protocol.user_manager.v1.BlockedPlayer.role)
}
inline void BlockedPlayer::_internal_add_role(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  role_.Add(value);
}
inline void BlockedPlayer::add_role(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_role(value);
  // @@protoc_insertion_point(field_add:bgs.protocol.user_manager.v1.BlockedPlayer.role)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
BlockedPlayer::_internal_role() const {
  return role_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
BlockedPlayer::role() const {
  // @@protoc_insertion_point(field_list:bgs.protocol.user_manager.v1.BlockedPlayer.role)
  return _internal_role();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
BlockedPlayer::_internal_mutable_role() {
  return &role_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
BlockedPlayer::mutable_role() {
  // @@protoc_insertion_point(field_mutable_list:bgs.protocol.user_manager.v1.BlockedPlayer.role)
  return _internal_mutable_role();
}

// optional uint64 privileges = 4 [default = 0];
inline bool BlockedPlayer::_internal_has_privileges() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool BlockedPlayer::has_privileges() const {
  return _internal_has_privileges();
}
inline void BlockedPlayer::clear_privileges() {
  privileges_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BlockedPlayer::_internal_privileges() const {
  return privileges_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BlockedPlayer::privileges() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.user_manager.v1.BlockedPlayer.privileges)
  return _internal_privileges();
}
inline void BlockedPlayer::_internal_set_privileges(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  privileges_ = value;
}
inline void BlockedPlayer::set_privileges(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_privileges(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.user_manager.v1.BlockedPlayer.privileges)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace user_manager
}  // namespace protocol
}  // namespace bgs

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_bgs_2flow_2fpb_2fclient_2fuser_5fmanager_5ftypes_2eproto
