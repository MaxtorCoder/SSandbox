// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bgs/low/pb/client/voice_types.proto

#include "bgs/low/pb/client/voice_types.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace bgs {
namespace protocol {
class VoiceCredentialsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VoiceCredentials> _instance;
} _VoiceCredentials_default_instance_;
}  // namespace protocol
}  // namespace bgs
static void InitDefaultsscc_info_VoiceCredentials_bgs_2flow_2fpb_2fclient_2fvoice_5ftypes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::_VoiceCredentials_default_instance_;
    new (ptr) ::bgs::protocol::VoiceCredentials();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::VoiceCredentials::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VoiceCredentials_bgs_2flow_2fpb_2fclient_2fvoice_5ftypes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_VoiceCredentials_bgs_2flow_2fpb_2fclient_2fvoice_5ftypes_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_bgs_2flow_2fpb_2fclient_2fvoice_5ftypes_2eproto[1];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_bgs_2flow_2fpb_2fclient_2fvoice_5ftypes_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_bgs_2flow_2fpb_2fclient_2fvoice_5ftypes_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_bgs_2flow_2fpb_2fclient_2fvoice_5ftypes_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::VoiceCredentials, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::VoiceCredentials, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::VoiceCredentials, voice_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::VoiceCredentials, token_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::VoiceCredentials, url_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::VoiceCredentials, join_type_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::VoiceCredentials, mute_reason_),
  0,
  1,
  2,
  3,
  4,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, sizeof(::bgs::protocol::VoiceCredentials)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::_VoiceCredentials_default_instance_),
};

const char descriptor_table_protodef_bgs_2flow_2fpb_2fclient_2fvoice_5ftypes_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n#bgs/low/pb/client/voice_types.proto\022\014b"
  "gs.protocol\"\317\001\n\020VoiceCredentials\022\020\n\010voic"
  "e_id\030\001 \001(\t\022\r\n\005token\030\002 \001(\t\022\013\n\003url\030\003 \001(\t\022A"
  "\n\tjoin_type\030\004 \001(\0162\033.bgs.protocol.VoiceJo"
  "inType:\021VOICE_JOIN_NORMAL\022J\n\013mute_reason"
  "\030\005 \001(\0162\035.bgs.protocol.VoiceMuteReason:\026V"
  "OICE_MUTE_REASON_NONE*<\n\rVoiceJoinType\022\025"
  "\n\021VOICE_JOIN_NORMAL\020\000\022\024\n\020VOICE_JOIN_MUTE"
  "D\020\001*\243\001\n\017VoiceMuteReason\022\032\n\026VOICE_MUTE_RE"
  "ASON_NONE\020\000\0222\n.VOICE_MUTE_REASON_PARENTA"
  "L_CONTROL_LISTEN_ONLY\020\001\022\037\n\033VOICE_MUTE_RE"
  "ASON_REQUESTED\020\002\022\037\n\033VOICE_MUTE_REASON_SQ"
  "UELCHED\020\003"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_bgs_2flow_2fpb_2fclient_2fvoice_5ftypes_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_bgs_2flow_2fpb_2fclient_2fvoice_5ftypes_2eproto_sccs[1] = {
  &scc_info_VoiceCredentials_bgs_2flow_2fpb_2fclient_2fvoice_5ftypes_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_bgs_2flow_2fpb_2fclient_2fvoice_5ftypes_2eproto_once;
static bool descriptor_table_bgs_2flow_2fpb_2fclient_2fvoice_5ftypes_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bgs_2flow_2fpb_2fclient_2fvoice_5ftypes_2eproto = {
  &descriptor_table_bgs_2flow_2fpb_2fclient_2fvoice_5ftypes_2eproto_initialized, descriptor_table_protodef_bgs_2flow_2fpb_2fclient_2fvoice_5ftypes_2eproto, "bgs/low/pb/client/voice_types.proto", 489,
  &descriptor_table_bgs_2flow_2fpb_2fclient_2fvoice_5ftypes_2eproto_once, descriptor_table_bgs_2flow_2fpb_2fclient_2fvoice_5ftypes_2eproto_sccs, descriptor_table_bgs_2flow_2fpb_2fclient_2fvoice_5ftypes_2eproto_deps, 1, 0,
  schemas, file_default_instances, TableStruct_bgs_2flow_2fpb_2fclient_2fvoice_5ftypes_2eproto::offsets,
  file_level_metadata_bgs_2flow_2fpb_2fclient_2fvoice_5ftypes_2eproto, 1, file_level_enum_descriptors_bgs_2flow_2fpb_2fclient_2fvoice_5ftypes_2eproto, file_level_service_descriptors_bgs_2flow_2fpb_2fclient_2fvoice_5ftypes_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_bgs_2flow_2fpb_2fclient_2fvoice_5ftypes_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_bgs_2flow_2fpb_2fclient_2fvoice_5ftypes_2eproto)), true);
namespace bgs {
namespace protocol {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* VoiceJoinType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_bgs_2flow_2fpb_2fclient_2fvoice_5ftypes_2eproto);
  return file_level_enum_descriptors_bgs_2flow_2fpb_2fclient_2fvoice_5ftypes_2eproto[0];
}
bool VoiceJoinType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* VoiceMuteReason_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_bgs_2flow_2fpb_2fclient_2fvoice_5ftypes_2eproto);
  return file_level_enum_descriptors_bgs_2flow_2fpb_2fclient_2fvoice_5ftypes_2eproto[1];
}
bool VoiceMuteReason_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void VoiceCredentials::InitAsDefaultInstance() {
}
class VoiceCredentials::_Internal {
 public:
  using HasBits = decltype(std::declval<VoiceCredentials>()._has_bits_);
  static void set_has_voice_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_token(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_url(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_join_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_mute_reason(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

VoiceCredentials::VoiceCredentials()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.VoiceCredentials)
}
VoiceCredentials::VoiceCredentials(const VoiceCredentials& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  voice_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_voice_id()) {
    voice_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.voice_id_);
  }
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_token()) {
    token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_url()) {
    url_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  ::memcpy(&join_type_, &from.join_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&mute_reason_) -
    reinterpret_cast<char*>(&join_type_)) + sizeof(mute_reason_));
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.VoiceCredentials)
}

void VoiceCredentials::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VoiceCredentials_bgs_2flow_2fpb_2fclient_2fvoice_5ftypes_2eproto.base);
  voice_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&join_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mute_reason_) -
      reinterpret_cast<char*>(&join_type_)) + sizeof(mute_reason_));
}

VoiceCredentials::~VoiceCredentials() {
  // @@protoc_insertion_point(destructor:bgs.protocol.VoiceCredentials)
  SharedDtor();
}

void VoiceCredentials::SharedDtor() {
  voice_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void VoiceCredentials::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VoiceCredentials& VoiceCredentials::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VoiceCredentials_bgs_2flow_2fpb_2fclient_2fvoice_5ftypes_2eproto.base);
  return *internal_default_instance();
}


void VoiceCredentials::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.VoiceCredentials)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      voice_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      token_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      url_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    ::memset(&join_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&mute_reason_) -
        reinterpret_cast<char*>(&join_type_)) + sizeof(mute_reason_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* VoiceCredentials::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string voice_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_voice_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bgs.protocol.VoiceCredentials.voice_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string token = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bgs.protocol.VoiceCredentials.token");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string url = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bgs.protocol.VoiceCredentials.url");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.VoiceJoinType join_type = 4 [default = VOICE_JOIN_NORMAL];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::bgs::protocol::VoiceJoinType_IsValid(val))) {
            _internal_set_join_type(static_cast<::bgs::protocol::VoiceJoinType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.VoiceMuteReason mute_reason = 5 [default = VOICE_MUTE_REASON_NONE];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::bgs::protocol::VoiceMuteReason_IsValid(val))) {
            _internal_set_mute_reason(static_cast<::bgs::protocol::VoiceMuteReason>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VoiceCredentials::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.VoiceCredentials)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string voice_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_voice_id().data(), static_cast<int>(this->_internal_voice_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "bgs.protocol.VoiceCredentials.voice_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_voice_id(), target);
  }

  // optional string token = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_token().data(), static_cast<int>(this->_internal_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "bgs.protocol.VoiceCredentials.token");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_token(), target);
  }

  // optional string url = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "bgs.protocol.VoiceCredentials.url");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_url(), target);
  }

  // optional .bgs.protocol.VoiceJoinType join_type = 4 [default = VOICE_JOIN_NORMAL];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_join_type(), target);
  }

  // optional .bgs.protocol.VoiceMuteReason mute_reason = 5 [default = VOICE_MUTE_REASON_NONE];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_mute_reason(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.VoiceCredentials)
  return target;
}

size_t VoiceCredentials::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.VoiceCredentials)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string voice_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_voice_id());
    }

    // optional string token = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_token());
    }

    // optional string url = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_url());
    }

    // optional .bgs.protocol.VoiceJoinType join_type = 4 [default = VOICE_JOIN_NORMAL];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_join_type());
    }

    // optional .bgs.protocol.VoiceMuteReason mute_reason = 5 [default = VOICE_MUTE_REASON_NONE];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_mute_reason());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VoiceCredentials::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.VoiceCredentials)
  GOOGLE_DCHECK_NE(&from, this);
  const VoiceCredentials* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VoiceCredentials>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.VoiceCredentials)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.VoiceCredentials)
    MergeFrom(*source);
  }
}

void VoiceCredentials::MergeFrom(const VoiceCredentials& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.VoiceCredentials)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      voice_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.voice_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.token_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      url_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (cached_has_bits & 0x00000008u) {
      join_type_ = from.join_type_;
    }
    if (cached_has_bits & 0x00000010u) {
      mute_reason_ = from.mute_reason_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VoiceCredentials::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.VoiceCredentials)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VoiceCredentials::CopyFrom(const VoiceCredentials& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.VoiceCredentials)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VoiceCredentials::IsInitialized() const {
  return true;
}

void VoiceCredentials::InternalSwap(VoiceCredentials* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  voice_id_.Swap(&other->voice_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  token_.Swap(&other->token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  url_.Swap(&other->url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(join_type_, other->join_type_);
  swap(mute_reason_, other->mute_reason_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VoiceCredentials::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protocol
}  // namespace bgs
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::bgs::protocol::VoiceCredentials* Arena::CreateMaybeMessage< ::bgs::protocol::VoiceCredentials >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::VoiceCredentials >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
