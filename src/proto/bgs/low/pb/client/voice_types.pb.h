// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bgs/low/pb/client/voice_types.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_bgs_2flow_2fpb_2fclient_2fvoice_5ftypes_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_bgs_2flow_2fpb_2fclient_2fvoice_5ftypes_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2fvoice_5ftypes_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_bgs_2flow_2fpb_2fclient_2fvoice_5ftypes_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bgs_2flow_2fpb_2fclient_2fvoice_5ftypes_2eproto;
namespace bgs {
namespace protocol {
class VoiceCredentials;
class VoiceCredentialsDefaultTypeInternal;
extern VoiceCredentialsDefaultTypeInternal _VoiceCredentials_default_instance_;
}  // namespace protocol
}  // namespace bgs
PROTOBUF_NAMESPACE_OPEN
template<> ::bgs::protocol::VoiceCredentials* Arena::CreateMaybeMessage<::bgs::protocol::VoiceCredentials>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace bgs {
namespace protocol {

enum VoiceJoinType : int {
  VOICE_JOIN_NORMAL = 0,
  VOICE_JOIN_MUTED = 1
};
bool VoiceJoinType_IsValid(int value);
constexpr VoiceJoinType VoiceJoinType_MIN = VOICE_JOIN_NORMAL;
constexpr VoiceJoinType VoiceJoinType_MAX = VOICE_JOIN_MUTED;
constexpr int VoiceJoinType_ARRAYSIZE = VoiceJoinType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* VoiceJoinType_descriptor();
template<typename T>
inline const std::string& VoiceJoinType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, VoiceJoinType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function VoiceJoinType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    VoiceJoinType_descriptor(), enum_t_value);
}
inline bool VoiceJoinType_Parse(
    const std::string& name, VoiceJoinType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<VoiceJoinType>(
    VoiceJoinType_descriptor(), name, value);
}
enum VoiceMuteReason : int {
  VOICE_MUTE_REASON_NONE = 0,
  VOICE_MUTE_REASON_PARENTAL_CONTROL_LISTEN_ONLY = 1,
  VOICE_MUTE_REASON_REQUESTED = 2,
  VOICE_MUTE_REASON_SQUELCHED = 3
};
bool VoiceMuteReason_IsValid(int value);
constexpr VoiceMuteReason VoiceMuteReason_MIN = VOICE_MUTE_REASON_NONE;
constexpr VoiceMuteReason VoiceMuteReason_MAX = VOICE_MUTE_REASON_SQUELCHED;
constexpr int VoiceMuteReason_ARRAYSIZE = VoiceMuteReason_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* VoiceMuteReason_descriptor();
template<typename T>
inline const std::string& VoiceMuteReason_Name(T enum_t_value) {
  static_assert(::std::is_same<T, VoiceMuteReason>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function VoiceMuteReason_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    VoiceMuteReason_descriptor(), enum_t_value);
}
inline bool VoiceMuteReason_Parse(
    const std::string& name, VoiceMuteReason* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<VoiceMuteReason>(
    VoiceMuteReason_descriptor(), name, value);
}
// ===================================================================

class VoiceCredentials :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.VoiceCredentials) */ {
 public:
  VoiceCredentials();
  virtual ~VoiceCredentials();

  VoiceCredentials(const VoiceCredentials& from);
  VoiceCredentials(VoiceCredentials&& from) noexcept
    : VoiceCredentials() {
    *this = ::std::move(from);
  }

  inline VoiceCredentials& operator=(const VoiceCredentials& from) {
    CopyFrom(from);
    return *this;
  }
  inline VoiceCredentials& operator=(VoiceCredentials&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VoiceCredentials& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VoiceCredentials* internal_default_instance() {
    return reinterpret_cast<const VoiceCredentials*>(
               &_VoiceCredentials_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(VoiceCredentials& a, VoiceCredentials& b) {
    a.Swap(&b);
  }
  inline void Swap(VoiceCredentials* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VoiceCredentials* New() const final {
    return CreateMaybeMessage<VoiceCredentials>(nullptr);
  }

  VoiceCredentials* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VoiceCredentials>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VoiceCredentials& from);
  void MergeFrom(const VoiceCredentials& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VoiceCredentials* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.VoiceCredentials";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fvoice_5ftypes_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fvoice_5ftypes_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVoiceIdFieldNumber = 1,
    kTokenFieldNumber = 2,
    kUrlFieldNumber = 3,
    kJoinTypeFieldNumber = 4,
    kMuteReasonFieldNumber = 5,
  };
  // optional string voice_id = 1;
  bool has_voice_id() const;
  private:
  bool _internal_has_voice_id() const;
  public:
  void clear_voice_id();
  const std::string& voice_id() const;
  void set_voice_id(const std::string& value);
  void set_voice_id(std::string&& value);
  void set_voice_id(const char* value);
  void set_voice_id(const char* value, size_t size);
  std::string* mutable_voice_id();
  std::string* release_voice_id();
  void set_allocated_voice_id(std::string* voice_id);
  private:
  const std::string& _internal_voice_id() const;
  void _internal_set_voice_id(const std::string& value);
  std::string* _internal_mutable_voice_id();
  public:

  // optional string token = 2;
  bool has_token() const;
  private:
  bool _internal_has_token() const;
  public:
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // optional string url = 3;
  bool has_url() const;
  private:
  bool _internal_has_url() const;
  public:
  void clear_url();
  const std::string& url() const;
  void set_url(const std::string& value);
  void set_url(std::string&& value);
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  std::string* mutable_url();
  std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // optional .bgs.protocol.VoiceJoinType join_type = 4 [default = VOICE_JOIN_NORMAL];
  bool has_join_type() const;
  private:
  bool _internal_has_join_type() const;
  public:
  void clear_join_type();
  ::bgs::protocol::VoiceJoinType join_type() const;
  void set_join_type(::bgs::protocol::VoiceJoinType value);
  private:
  ::bgs::protocol::VoiceJoinType _internal_join_type() const;
  void _internal_set_join_type(::bgs::protocol::VoiceJoinType value);
  public:

  // optional .bgs.protocol.VoiceMuteReason mute_reason = 5 [default = VOICE_MUTE_REASON_NONE];
  bool has_mute_reason() const;
  private:
  bool _internal_has_mute_reason() const;
  public:
  void clear_mute_reason();
  ::bgs::protocol::VoiceMuteReason mute_reason() const;
  void set_mute_reason(::bgs::protocol::VoiceMuteReason value);
  private:
  ::bgs::protocol::VoiceMuteReason _internal_mute_reason() const;
  void _internal_set_mute_reason(::bgs::protocol::VoiceMuteReason value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.VoiceCredentials)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr voice_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  int join_type_;
  int mute_reason_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fvoice_5ftypes_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// VoiceCredentials

// optional string voice_id = 1;
inline bool VoiceCredentials::_internal_has_voice_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool VoiceCredentials::has_voice_id() const {
  return _internal_has_voice_id();
}
inline void VoiceCredentials::clear_voice_id() {
  voice_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& VoiceCredentials::voice_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.VoiceCredentials.voice_id)
  return _internal_voice_id();
}
inline void VoiceCredentials::set_voice_id(const std::string& value) {
  _internal_set_voice_id(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.VoiceCredentials.voice_id)
}
inline std::string* VoiceCredentials::mutable_voice_id() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.VoiceCredentials.voice_id)
  return _internal_mutable_voice_id();
}
inline const std::string& VoiceCredentials::_internal_voice_id() const {
  return voice_id_.GetNoArena();
}
inline void VoiceCredentials::_internal_set_voice_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  voice_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void VoiceCredentials::set_voice_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  voice_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bgs.protocol.VoiceCredentials.voice_id)
}
inline void VoiceCredentials::set_voice_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  voice_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bgs.protocol.VoiceCredentials.voice_id)
}
inline void VoiceCredentials::set_voice_id(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  voice_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bgs.protocol.VoiceCredentials.voice_id)
}
inline std::string* VoiceCredentials::_internal_mutable_voice_id() {
  _has_bits_[0] |= 0x00000001u;
  return voice_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* VoiceCredentials::release_voice_id() {
  // @@protoc_insertion_point(field_release:bgs.protocol.VoiceCredentials.voice_id)
  if (!_internal_has_voice_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return voice_id_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void VoiceCredentials::set_allocated_voice_id(std::string* voice_id) {
  if (voice_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  voice_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), voice_id);
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.VoiceCredentials.voice_id)
}

// optional string token = 2;
inline bool VoiceCredentials::_internal_has_token() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool VoiceCredentials::has_token() const {
  return _internal_has_token();
}
inline void VoiceCredentials::clear_token() {
  token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& VoiceCredentials::token() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.VoiceCredentials.token)
  return _internal_token();
}
inline void VoiceCredentials::set_token(const std::string& value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.VoiceCredentials.token)
}
inline std::string* VoiceCredentials::mutable_token() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.VoiceCredentials.token)
  return _internal_mutable_token();
}
inline const std::string& VoiceCredentials::_internal_token() const {
  return token_.GetNoArena();
}
inline void VoiceCredentials::_internal_set_token(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void VoiceCredentials::set_token(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  token_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bgs.protocol.VoiceCredentials.token)
}
inline void VoiceCredentials::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bgs.protocol.VoiceCredentials.token)
}
inline void VoiceCredentials::set_token(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bgs.protocol.VoiceCredentials.token)
}
inline std::string* VoiceCredentials::_internal_mutable_token() {
  _has_bits_[0] |= 0x00000002u;
  return token_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* VoiceCredentials::release_token() {
  // @@protoc_insertion_point(field_release:bgs.protocol.VoiceCredentials.token)
  if (!_internal_has_token()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return token_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void VoiceCredentials::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  token_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.VoiceCredentials.token)
}

// optional string url = 3;
inline bool VoiceCredentials::_internal_has_url() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool VoiceCredentials::has_url() const {
  return _internal_has_url();
}
inline void VoiceCredentials::clear_url() {
  url_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& VoiceCredentials::url() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.VoiceCredentials.url)
  return _internal_url();
}
inline void VoiceCredentials::set_url(const std::string& value) {
  _internal_set_url(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.VoiceCredentials.url)
}
inline std::string* VoiceCredentials::mutable_url() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.VoiceCredentials.url)
  return _internal_mutable_url();
}
inline const std::string& VoiceCredentials::_internal_url() const {
  return url_.GetNoArena();
}
inline void VoiceCredentials::_internal_set_url(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void VoiceCredentials::set_url(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  url_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bgs.protocol.VoiceCredentials.url)
}
inline void VoiceCredentials::set_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bgs.protocol.VoiceCredentials.url)
}
inline void VoiceCredentials::set_url(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bgs.protocol.VoiceCredentials.url)
}
inline std::string* VoiceCredentials::_internal_mutable_url() {
  _has_bits_[0] |= 0x00000004u;
  return url_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* VoiceCredentials::release_url() {
  // @@protoc_insertion_point(field_release:bgs.protocol.VoiceCredentials.url)
  if (!_internal_has_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return url_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void VoiceCredentials::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  url_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.VoiceCredentials.url)
}

// optional .bgs.protocol.VoiceJoinType join_type = 4 [default = VOICE_JOIN_NORMAL];
inline bool VoiceCredentials::_internal_has_join_type() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool VoiceCredentials::has_join_type() const {
  return _internal_has_join_type();
}
inline void VoiceCredentials::clear_join_type() {
  join_type_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::bgs::protocol::VoiceJoinType VoiceCredentials::_internal_join_type() const {
  return static_cast< ::bgs::protocol::VoiceJoinType >(join_type_);
}
inline ::bgs::protocol::VoiceJoinType VoiceCredentials::join_type() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.VoiceCredentials.join_type)
  return _internal_join_type();
}
inline void VoiceCredentials::_internal_set_join_type(::bgs::protocol::VoiceJoinType value) {
  assert(::bgs::protocol::VoiceJoinType_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  join_type_ = value;
}
inline void VoiceCredentials::set_join_type(::bgs::protocol::VoiceJoinType value) {
  _internal_set_join_type(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.VoiceCredentials.join_type)
}

// optional .bgs.protocol.VoiceMuteReason mute_reason = 5 [default = VOICE_MUTE_REASON_NONE];
inline bool VoiceCredentials::_internal_has_mute_reason() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool VoiceCredentials::has_mute_reason() const {
  return _internal_has_mute_reason();
}
inline void VoiceCredentials::clear_mute_reason() {
  mute_reason_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::bgs::protocol::VoiceMuteReason VoiceCredentials::_internal_mute_reason() const {
  return static_cast< ::bgs::protocol::VoiceMuteReason >(mute_reason_);
}
inline ::bgs::protocol::VoiceMuteReason VoiceCredentials::mute_reason() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.VoiceCredentials.mute_reason)
  return _internal_mute_reason();
}
inline void VoiceCredentials::_internal_set_mute_reason(::bgs::protocol::VoiceMuteReason value) {
  assert(::bgs::protocol::VoiceMuteReason_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  mute_reason_ = value;
}
inline void VoiceCredentials::set_mute_reason(::bgs::protocol::VoiceMuteReason value) {
  _internal_set_mute_reason(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.VoiceCredentials.mute_reason)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol
}  // namespace bgs

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::bgs::protocol::VoiceJoinType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bgs::protocol::VoiceJoinType>() {
  return ::bgs::protocol::VoiceJoinType_descriptor();
}
template <> struct is_proto_enum< ::bgs::protocol::VoiceMuteReason> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bgs::protocol::VoiceMuteReason>() {
  return ::bgs::protocol::VoiceMuteReason_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_bgs_2flow_2fpb_2fclient_2fvoice_5ftypes_2eproto
